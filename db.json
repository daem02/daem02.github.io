{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/201906010.jpeg","path":"images/201906010.jpeg","modified":0,"renderable":0},{"_id":"source/images/speed.png","path":"images/speed.png","modified":0,"renderable":0},{"_id":"source/images/tree.png","path":"images/tree.png","modified":0,"renderable":0},{"_id":"source/images/dog.jpg","path":"images/dog.jpg","modified":0,"renderable":0},{"_id":"source/images/gitreset.png","path":"images/gitreset.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/animated.less","path":"lib/font-awesome/less/animated.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/bordered-pulled.less","path":"lib/font-awesome/less/bordered-pulled.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/core.less","path":"lib/font-awesome/less/core.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/fixed-width.less","path":"lib/font-awesome/less/fixed-width.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/font-awesome.less","path":"lib/font-awesome/less/font-awesome.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/larger.less","path":"lib/font-awesome/less/larger.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/list.less","path":"lib/font-awesome/less/list.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/rotated-flipped.less","path":"lib/font-awesome/less/rotated-flipped.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/screen-reader.less","path":"lib/font-awesome/less/screen-reader.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/stacked.less","path":"lib/font-awesome/less/stacked.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/icons.less","path":"lib/font-awesome/less/icons.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/mixins.less","path":"lib/font-awesome/less/mixins.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/path.less","path":"lib/font-awesome/less/path.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/less/variables.less","path":"lib/font-awesome/less/variables.less","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/scss/font-awesome.scss","path":"lib/font-awesome/scss/font-awesome.scss","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1559440065868},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1559440065868},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1559440065868},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1559440065869},{"_id":"themes/next/.stickler.yml","hash":"ff2f06a57645c0034e86667c104656f8d7cfadd4","modified":1559440065872},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1559440065873},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1559440065874},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1559440065873},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1559440065875},{"_id":"themes/next/_config.yml","hash":"6fecfb0f7649ace0b77b13053eee730a9ccd9f57","modified":1563014240659},{"_id":"themes/next/README.md","hash":"ca711f92e985183030de7b7fcc6efd9018c638b8","modified":1559440065874},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1559440065912},{"_id":"themes/next/bower.json","hash":"72d7f5ef565cca1da30ba64fc04075b9ac99e319","modified":1559440065875},{"_id":"themes/next/package.json","hash":"735ace0b7fe3b1171c220c5424fcd4fe3aadd7f8","modified":1559440065968},{"_id":"source/images/201906010.jpeg","hash":"46af2f27c469c122c3348689efc0945e188c4444","modified":1559440065816},{"_id":"source/categories/index.md","hash":"82806a3edea8d30c4b54cabe73c8e337b49df71d","modified":1559440065815},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1559440065812},{"_id":"source/images/speed.png","hash":"5567ef64d242d4603cc3b7c19d6db45cc2a69475","modified":1562158826197},{"_id":"source/images/tree.png","hash":"76ea1afe64b552a13bb0bd973c7b573b30e2edd3","modified":1562414440134},{"_id":"source/_posts/2019-05-29-markdown学习.md","hash":"fba469116358a98d9c682ef4af7decf34254dc03","modified":1562326781614},{"_id":"source/_posts/2019-06-18-dredd-study.md","hash":"0e28db13a77cbe00e8783129443a5cd064f39979","modified":1562327005292},{"_id":"source/_posts/2019-06-01-hexo踩坑记录.md","hash":"df279e1f51b13b661c6c281911acc4cea728e402","modified":1562326826310},{"_id":"source/_posts/2019-06-01-git踩坑记录.md","hash":"0c1f2dd5ca715f5524f7209ea5656af3605d8678","modified":1562414237708},{"_id":"source/_posts/2019-07-13-139-单词拆分.md","hash":"c3bbbab9d1d2cffaf96efb35e68ac7a7ad03afc9","modified":1563009333565},{"_id":"source/tags/index.md","hash":"1edf30e8b9cd694da1b8232416a9acce0cd59a82","modified":1559440065817},{"_id":"source/_posts/2019-06-01-json字符串与json对象转换.md","hash":"02dd9ddcd66cfa829f7ad582238b98fbd2f93190","modified":1563017013799},{"_id":"source/_posts/2019-07-06-LeetCode-1104-Path-In-Zigzag-Labelled-Binary-Tree.md","hash":"eb448490f69361be699d823b4d77209d07a32c3b","modified":1562417798304},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1559440065869},{"_id":"source/_posts/2019-07-03-install-shadowsocks.md","hash":"00489b1c3a06d09f2c0245bf6cefc3dcf78a4e4c","modified":1562327015404},{"_id":"source/_posts/2019-07-05-LeetCode-1103-Distribute-Candies-to-People.md","hash":"7252aa5ce4e70a4a1cd301c30b44f091b278a94c","modified":1562333758235},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"869dcd36524e2c61ddd2315c1266edca7f0da6c9","modified":1559440065870},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1559440065870},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1559440065871},{"_id":"source/_posts/2019-07-09-213-House-Robber-II.md","hash":"fc60a28116495657d9081b31b42efd2ec66b6edf","modified":1562680926212},{"_id":"themes/next/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1559440065872},{"_id":"source/_posts/2019-07-08-1190-航班预订统计.md","hash":"5cc7d2f51531a38f223310bb9b9e080f3adb912f","modified":1562589449948},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1559440065871},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1559440065876},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1559440065877},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1559440065878},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1559440065877},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1559440065878},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1559440065879},{"_id":"themes/next/git.git/config","hash":"d494c1c30b4a08470641726ac16fbf1cf1e7d14f","modified":1559440065888},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1559440065879},{"_id":"themes/next/docs/MATH.md","hash":"34a46ca9a05b4570903beaadd4807e6759afb52e","modified":1559440065880},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1559440065880},{"_id":"themes/next/git.git/description","hash":"88d76a8724b84a5bbcc3bea08650bc679a0b3da6","modified":1559440065888},{"_id":"themes/next/git.git/HEAD","hash":"509e0f78e789c5517a73f9884e9c4d0c89abf07b","modified":1559440065888},{"_id":"themes/next/git.git/index","hash":"7ad45b1da272df6599c81b1778affb1c35a94f1c","modified":1559440065894},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1559440065913},{"_id":"themes/next/git.git/packed-refs","hash":"138146b861de879f36435a931d17518d7ac3bff7","modified":1559440065910},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1559440065914},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1559440065914},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1559440065915},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1559440065915},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1559440065914},{"_id":"themes/next/languages/ja.yml","hash":"7836f1de1f383d3a53770a03498cc39a37674f0c","modified":1559440065916},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1559440065917},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1559440065917},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1559440065917},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1559440065918},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1559440065918},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1559440065919},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1559440065920},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1559440065919},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1559440065920},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1559440065920},{"_id":"themes/next/layout/index.swig","hash":"9257f8c35b1eeb3dbc3eb8e7c791620d9ce931f3","modified":1559440065966},{"_id":"themes/next/layout/_layout.swig","hash":"4a3e7ebb0d4f88a64e919695aa4272221fe88347","modified":1559440065922},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1559440065967},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1559440065965},{"_id":"themes/next/scripts/helpers.js","hash":"c91522de30a85cd36b3547ad3446c34e4ba618ef","modified":1559440065969},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1559440065966},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1559440065969},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1559440065970},{"_id":"themes/next/layout/post.swig","hash":"ce227737a6273c6ba729fa426418ec3f9722fdb4","modified":1559440065967},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1559440065967},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1559440065966},{"_id":"source/images/dog.jpg","hash":"b5303ad1ecaa7ac940d9cb9ee1889fa4ffd57a5c","modified":1559440065817},{"_id":"source/images/gitreset.png","hash":"b064c57748294cb7467e81477de4636321073e54","modified":1562414237710},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1559440066057},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1559440066058},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1559440066058},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559440066033},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1559440065883},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1559440065883},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"f2a2d6e68c5f65e27303b40f5285a8a4a5adae4c","modified":1559440065884},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1559440065884},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1559440065885},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1559440065886},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"4d68054b062b3c8404b146a155d9624d2d25dd9b","modified":1559440065886},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"1ec7a0e9ac64b2c84aa1fd7ba2c662be1dbcb407","modified":1559440065887},{"_id":"themes/next/docs/zh-CN/README.md","hash":"a4d2c1f90d5bd1d54f92b39b47ff85b1fe8b4e81","modified":1559440065887},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1559440065881},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1559440065882},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1559440065881},{"_id":"themes/next/docs/ru/README.md","hash":"a78a155885ce23f924cd194b8c69fe7f2ffea8d0","modified":1559440065882},{"_id":"themes/next/git.git/hooks/applypatch-msg.sample","hash":"61f0ed9af9a16dbba9b834edfb657f07aa10125d","modified":1559440065889},{"_id":"themes/next/git.git/hooks/commit-msg.sample","hash":"e44c3d173580f6b4d8ee7f9b963d252af9902703","modified":1559440065889},{"_id":"themes/next/git.git/hooks/post-update.sample","hash":"6c00d034115de8f56eba4ded1eba7ffc73b332f6","modified":1559440065890},{"_id":"themes/next/git.git/hooks/pre-commit.sample","hash":"da4e689ea46d093a0a4585046fca844e243b22b0","modified":1559440065891},{"_id":"themes/next/git.git/hooks/pre-rebase.sample","hash":"7095ebe13a8c6f5c70382e2ac1b4c5d53502f8c2","modified":1559440065892},{"_id":"themes/next/git.git/hooks/pre-applypatch.sample","hash":"7863e8a9fef55740491ab4429a13081a20a1dad9","modified":1559440065890},{"_id":"themes/next/git.git/hooks/pre-push.sample","hash":"ac10c067e42e887ed93052dbece70922812546f3","modified":1559440065891},{"_id":"themes/next/git.git/hooks/update.sample","hash":"df9f68bdcd0e7c6cee8cdce7b17f8ff7e625847b","modified":1559440065893},{"_id":"themes/next/git.git/hooks/prepare-commit-msg.sample","hash":"bbc936f9c3920673a901aae46a8b99afb1400a56","modified":1559440065893},{"_id":"themes/next/git.git/info/exclude","hash":"0214ce0925395605f10f65300bc1e4871dd9441e","modified":1559440065895},{"_id":"themes/next/git.git/logs/HEAD","hash":"c21d579894cbe968367be91c0fdd96a3416a8fc4","modified":1559440065895},{"_id":"themes/next/git.git/hooks/pre-receive.sample","hash":"bfff8781c853c3d554371cc50e63ec70eb377711","modified":1559440065892},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"da831b8f1a9a6cbf9897318cad82be76254b62ab","modified":1559440065925},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1559440065925},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1559440065924},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1559440065926},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1559440065927},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1559440065927},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1559440065928},{"_id":"themes/next/layout/_macro/post.swig","hash":"b1ef162930827e4d57a29c4cf0cd349b36c30323","modified":1559440065926},{"_id":"themes/next/layout/_partials/comments.swig","hash":"2e8c3df265e9ae38003d1321fb80fb3b12cb6a97","modified":1559440065929},{"_id":"themes/next/layout/_partials/footer.swig","hash":"215a6689bdb6a0fcf58ccb6c28e93d6864b7e00a","modified":1559440065929},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1559440065934},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1559440065934},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1559440065956},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1559440065956},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1559440065950},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1559440065957},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1559440065960},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1559440065961},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1559440065959},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1559440065960},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1559440065939},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1559440065939},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1559440065940},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1559440065921},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1559440065922},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1559440065959},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1559440065922},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1559440065943},{"_id":"themes/next/scripts/tags/button.js","hash":"496e3846f353d253dad944b2ed8fdc4e02dcc28a","modified":1559440065971},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"5c87817385986748617fa87dee9cba654566adcd","modified":1559440065971},{"_id":"themes/next/scripts/tags/exturl.js","hash":"4f928ef9ad0ae8e3d766352b8861bc22f96de5d8","modified":1559440065971},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"696157d4e4382fdbe29c674b0f4b433d47db449b","modified":1559440065973},{"_id":"themes/next/scripts/tags/full-image.js","hash":"2118895d2d5e379240b27399a6c988a74f25a427","modified":1559440065972},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"1f7bafba9cf3c94f5735873bd52e93ddcf37f8a2","modified":1559440065973},{"_id":"themes/next/scripts/tags/label.js","hash":"d8bfb2974c6afef2c085642857b70b6569b4a097","modified":1559440065974},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"92c0ead5f503cfc4ee7c254ebfb00a2623fa1890","modified":1559440065974},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1559440065975},{"_id":"themes/next/scripts/tags/note.js","hash":"1cec218c9fcaa8fb4144bf9d0b39babcaafac8d4","modified":1559440065975},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1559440066032},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1559440066034},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1559440066035},{"_id":"themes/next/source/images/avatar.jpg","hash":"ef5732a31948a9bea83013434f6a1f6222eb910d","modified":1559440066035},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1559440066036},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1559440066034},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1559440066038},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1559440066037},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1559440066040},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1559440066039},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1559440066040},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1559440066038},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559440066042},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559440066041},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1559440066039},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1559440066040},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1559440066042},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1559440066041},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1559440066042},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1559440066043},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559440065941},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559440065941},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559440066015},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559440066015},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559440066016},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559440066030},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559440066032},{"_id":"themes/next/git.git/refs/heads/master","hash":"df777073364c9b9c507c0d83b33eba4eee8e5893","modified":1559440065911},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1559440065923},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1559440065924},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1559440065930},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1559440065930},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1559440065931},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1559440065932},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1559440065932},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1559440065933},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1559440065933},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1559440065943},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1559440065944},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1559440065945},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1559440065946},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"1ce5fa218a44cf6e620583e9013e0b674dd6a989","modified":1559440065945},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1559440065946},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1559440065947},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"d67d9a176a276cdab6f2bcb7eb3650fbca5459c4","modified":1559440065947},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1559440065948},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1559440065948},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1559440065949},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"7973b4741863362cd9d023216de4a43eb23dc227","modified":1559440065948},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1559440065949},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1559440065938},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1559440065937},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1559440065935},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1559440065938},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1559440065935},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1559440065936},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1559440065937},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1559440065936},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1559440065950},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"4a2d2269f23e90c1311bd867d22def0b4a092bf1","modified":1559440065951},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1559440065951},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"18a58db53f1eef50462ee0065d4445b7fbb04fb5","modified":1559440065954},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"787d482d797c38e77d69629ebb88d45f972216b7","modified":1559440065953},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7cf0c589d95a2d1848266ffe2357e91c95d2e7f8","modified":1559440065954},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"ab181c036cda9656f87bb1a749e3e7cbc437f012","modified":1559440065955},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"de1fac9bb3f0cab88b1ed1950f76c7eb0037aeda","modified":1559440065955},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1559440065957},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1559440065958},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1559440065958},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1559440065963},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1559440065964},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1559440065964},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1559440065963},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1559440065941},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1559440065942},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1559440065940},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1559440066014},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1559440066015},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1559440066016},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"4d6dd32dae6f0ea93d43c5cfa0106b6cb46c3b00","modified":1559440066016},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1559440066030},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8b5fc9e6621a5de04ae7d9ef117683c69965fb00","modified":1559440066030},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b89e68789e6dac24e00250528f4fc9ae8aa3599b","modified":1559440066031},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1562414237712},{"_id":"themes/next/source/css/_variables/base.styl","hash":"534b9dec93f3e235c217b97314d4bf513fa3e5ba","modified":1559440066031},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1559440066055},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1559440066056},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1559440066056},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1559440066044},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1559440066044},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"8e9ed6392620ba68726c0ade4868100d831daba8","modified":1559440066045},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1559440066045},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1559440066046},{"_id":"themes/next/source/js/src/motion.js","hash":"bea49fc6392bd38fb6f80d041d95d23051423aa2","modified":1559440066046},{"_id":"themes/next/source/js/src/post-details.js","hash":"02acfa1862d5e4345d6a7cee08841cc9e2fb0259","modified":1559440066047},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1559440066048},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1559440066049},{"_id":"themes/next/source/js/src/utils.js","hash":"d8d288bc41af85fc72882239529131cbd6a13f9d","modified":1559440066049},{"_id":"themes/next/git.git/objects/pack/pack-a4fcdc916028901217fe01bd511cf84f276c99f5.idx","hash":"64f7a99a28035044407ec604bc020ca660c4aa96","modified":1559440065899},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1559440066051},{"_id":"themes/next/git.git/logs/refs/heads/master","hash":"c21d579894cbe968367be91c0fdd96a3416a8fc4","modified":1559440065896},{"_id":"themes/next/git.git/refs/remotes/origin/HEAD","hash":"e72f7364331a01c35feea3858c09e16db1631660","modified":1559440065912},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1559440065962},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1559440065962},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1559440065977},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1559440065977},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1559440065978},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1559440065978},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1559440065979},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1559440066000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1559440065987},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"97bb39756e85f5b27bba7f43270105ad01d736c9","modified":1559440066011},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1559440066013},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1559440066012},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1559440066012},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1559440066013},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"52bc8ba71b91d954530b35dfc63b402a02b1321d","modified":1559440066013},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1559440066018},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1559440066010},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1559440066019},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"c08eb379718fa5af267fd8c5fe9b926003c0c7c7","modified":1559440066017},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1559440066020},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1559440066019},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1559440066020},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1559440066020},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1559440066023},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1559440066024},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1559440066025},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1559440066024},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1559440066021},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1559440066026},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1559440066024},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1559440066028},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ab7eb1d66e300264a225feb6f8bed55683c96cdf","modified":1559440066027},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1559440066029},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1559440066027},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1559440066028},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1559440066028},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1562414237713},{"_id":"themes/next/source/lib/font-awesome/less/animated.less","hash":"472ec14f388c90a7201861e77faec317d038fd9c","modified":1562414237783},{"_id":"themes/next/source/lib/font-awesome/less/bordered-pulled.less","hash":"66dc98ad0e4151e8938350f1ee3d0932348b37e8","modified":1562414237784},{"_id":"themes/next/source/lib/font-awesome/less/core.less","hash":"5f436a1afd7f1de7dde20ed8c2fd84812b8acf12","modified":1562414237784},{"_id":"themes/next/source/lib/font-awesome/less/fixed-width.less","hash":"a9552c8a91766a6d926c43c4c0f74acb62aaf719","modified":1562414237785},{"_id":"themes/next/source/lib/font-awesome/less/font-awesome.less","hash":"06bd9cd5c5a646b1c631ba7b1edb77f60d84a91b","modified":1562414237786},{"_id":"themes/next/source/lib/font-awesome/less/larger.less","hash":"d9610d7f83b0aaf3fdd5fa048117bd8620adf346","modified":1562414237790},{"_id":"themes/next/source/lib/font-awesome/less/list.less","hash":"2b203f3bacd6eaa58d0aa11efb9fb661b884eeb9","modified":1562414237790},{"_id":"themes/next/source/lib/font-awesome/less/rotated-flipped.less","hash":"39ec6a3d98e5a55a2330935d139f95855c139dcf","modified":1562414237793},{"_id":"themes/next/source/lib/font-awesome/less/screen-reader.less","hash":"3fa86249735534461a08afa86b5d7d774de7ef3f","modified":1562414237793},{"_id":"themes/next/source/lib/font-awesome/less/stacked.less","hash":"ee10b7a0bc941f8d0bbd092d4178b9fae9f1661f","modified":1562414237794},{"_id":"themes/next/source/lib/font-awesome/less/icons.less","hash":"e7492081853b880643f96e28659218b92c6e660a","modified":1562414237788},{"_id":"themes/next/source/lib/font-awesome/less/mixins.less","hash":"9b53403a944d93c5d7238c8942534fccf7957cff","modified":1562414237791},{"_id":"themes/next/source/lib/font-awesome/scss/_bordered-pulled.scss","hash":"39353047bbcce4f3f706666df1547e64546932a0","modified":1562414237796},{"_id":"themes/next/source/lib/font-awesome/scss/_core.scss","hash":"2dce8814642ef0ee86c65f3d29818c17fd8951f9","modified":1562414237797},{"_id":"themes/next/source/lib/font-awesome/scss/_fixed-width.scss","hash":"f4af333866ff3c0da59493fc7077965c6e9d46ac","modified":1562414237798},{"_id":"themes/next/source/lib/font-awesome/less/path.less","hash":"fce36570fe54da40c1c61f20d62bf9751a81a27e","modified":1562414237792},{"_id":"themes/next/source/lib/font-awesome/scss/_larger.scss","hash":"c5cf379c23025aa001f850bd560a87a92e4f711d","modified":1562414237800},{"_id":"themes/next/source/lib/font-awesome/scss/_list.scss","hash":"8e9c5708bd91364a749f93555ba65af3c49ff1a6","modified":1562414237801},{"_id":"themes/next/source/lib/font-awesome/less/variables.less","hash":"e0dab04318d43211435c82989fbc05d0876b2708","modified":1562414237795},{"_id":"themes/next/source/lib/font-awesome/scss/_animated.scss","hash":"c3d081abee1076d36a289afc6488e676bc59f023","modified":1562414237796},{"_id":"themes/next/source/lib/font-awesome/scss/_rotated-flipped.scss","hash":"fd48d098af52ffff6f829e7f5a2250a9c3cfc87f","modified":1562414237803},{"_id":"themes/next/source/lib/font-awesome/scss/_screen-reader.scss","hash":"ebe3fe40059e5a2a3a3c0c0f587a2e2bc23fd1b2","modified":1562414237803},{"_id":"themes/next/source/lib/font-awesome/scss/_stacked.scss","hash":"c4fe90e7781e8b229bf2657312ba61ecf1026cab","modified":1562414237803},{"_id":"themes/next/source/lib/font-awesome/scss/_icons.scss","hash":"303a6e9e04e91a132612f094b34cccfc90c63bec","modified":1562414237798},{"_id":"themes/next/source/lib/font-awesome/scss/_mixins.scss","hash":"25b2361e654e3512c1f6024f3a8d593413611a58","modified":1562414237802},{"_id":"themes/next/source/lib/font-awesome/scss/font-awesome.scss","hash":"6bfc7e75fd344628b06d85f7fa4d48b106334584","modified":1562414237806},{"_id":"themes/next/source/lib/font-awesome/scss/_path.scss","hash":"011339ce07bb12a5736edd7fdbed0b7f3c63bf72","modified":1562414237802},{"_id":"themes/next/source/lib/font-awesome/scss/_variables.scss","hash":"8e450f7064c308a124fe82ded322db59fbbeb59f","modified":1562414237805},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1559440066048},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1562414237714},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1562414237778},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1562414237781},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1559440066054},{"_id":"themes/next/git.git/logs/refs/remotes/origin/HEAD","hash":"c21d579894cbe968367be91c0fdd96a3416a8fc4","modified":1559440065897},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1559440065981},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1559440065980},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1559440065981},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1559440065982},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1559440065982},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1559440065982},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1559440065980},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1559440065983},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"835c1340571bd6c4ec263c482cf13283fb047e49","modified":1559440065983},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1559440065985},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1559440065986},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1559440065984},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1559440065986},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1559440065986},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1559440065988},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1559440065987},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1559440065989},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1559440065988},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1559440065989},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1559440065985},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1559440065991},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1559440065990},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1559440065991},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1559440065992},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1559440065992},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1559440065993},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1559440065992},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1559440065993},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1559440065994},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"adfd6d2d3b34adc4b476a0ea91e19020456a3b1a","modified":1559440065994},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1559440065995},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"1faeb3fca899df9d033e4e6ad9a4867cdce7ef9d","modified":1559440065995},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1559440065996},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1559440065997},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"debe322cc9e2688ecf38d0b6afcd6b71ad02fbd0","modified":1559440065996},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1559440065997},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1559440065997},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1559440065998},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1559440065998},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1559440065999},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1559440066000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1559440065999},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1559440066001},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1559440066001},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"d79c051abb8ab7b5ee5da29a28587704fd5108f5","modified":1559440066002},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1559440066002},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1559440066002},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1559440066003},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1559440066004},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1559440066004},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1559440066004},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1559440066006},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1559440066005},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1559440066006},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1559440066006},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1559440066007},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1559440066007},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1559440066009},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1559440066008},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1559440066009},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"0b9c4140d7bc526553553552c3ed92da7c81e0b6","modified":1559440066009},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1559440066022},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1559440066022},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1559440066025},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1562414237733},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1562414237776},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1562414237752},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1562414237772},{"_id":"themes/next/git.git/objects/pack/pack-a4fcdc916028901217fe01bd511cf84f276c99f5.pack","hash":"19d4aad446b8e37c3e44b1c0e4bbe073ba7bcfb7","modified":1559440065909},{"_id":"public/search.xml","hash":"283a90de2ec11c4d7241eae0254f2f8c8f04d806","modified":1563017030209},{"_id":"public/categories/index.html","hash":"5376db73bc4198923286a6d74a5c61014c21b280","modified":1563017030231},{"_id":"public/2019/07/08/1190-航班预订统计/index.html","hash":"fb6473a7523efe99328e1dc140045d5be082aad1","modified":1563017030232},{"_id":"public/tags/index.html","hash":"b26db1c1dbd4a06b883a6a85765a27014ea42ce1","modified":1563017030231},{"_id":"public/2019/07/06/LeetCode-1104-Path-In-Zigzag-Labelled-Binary-Tree/index.html","hash":"70bbbc1933b1e0aac8a542e6a410cb237b378749","modified":1563017030233},{"_id":"public/2019/06/18/dredd-study/index.html","hash":"4425ae25ca42cf6abdc653bd0f1aba28d53af76a","modified":1563017030233},{"_id":"public/2019/06/01/hexo踩坑记录/index.html","hash":"5b6e09ca4534b30b4178b3a92e3bf3a8c2bddb49","modified":1563017030235},{"_id":"public/2019/07/13/139-单词拆分/index.html","hash":"9cb56eddddc5768696478607e0477a852087804b","modified":1563017030232},{"_id":"public/2019/07/05/LeetCode-1103-Distribute-Candies-to-People/index.html","hash":"ecc7b2dd24b0679c3f6964dab5421bfacc9b2576","modified":1563017030233},{"_id":"public/2019/07/03/install-shadowsocks/index.html","hash":"760daa778ee01b621e19bd16584dadd8c2654cd0","modified":1563017030233},{"_id":"public/2019/06/01/git踩坑记录/index.html","hash":"8bf463cd6df02359dccf2c7af03be90780b85c94","modified":1563017030235},{"_id":"public/2019/07/09/213-House-Robber-II/index.html","hash":"3d3ce7b905f37cd51157828584bf0846f548b86b","modified":1563017030232},{"_id":"public/2019/06/01/json字符串与json对象转换/index.html","hash":"c650f2f56c4cea417e62b96220f4c849e92327fd","modified":1563017030235},{"_id":"public/archives/index.html","hash":"dc8747962c21b155bd7a02fac8d6670ae9aec4b1","modified":1563017030236},{"_id":"public/archives/2019/index.html","hash":"0803d471359082eb9ebb5e3bc924b39d5736b6b7","modified":1563017030236},{"_id":"public/archives/2019/05/index.html","hash":"3bb395f482fa262ca09a148090c27b06df99f8f6","modified":1563017030236},{"_id":"public/archives/2019/06/index.html","hash":"4cae0dfdb81a68b119beb4f575ae6e851d73f3c7","modified":1563017030237},{"_id":"public/archives/2019/07/index.html","hash":"08242db35335da91c2582948e7b3cf669d2f1670","modified":1563017030237},{"_id":"public/categories/工具/index.html","hash":"bba62e1de46c66b48ca92f78207d5db8d7b0de43","modified":1563017030237},{"_id":"public/categories/测试/index.html","hash":"855ab78b5ec6cc929044763957cacb98c7858d21","modified":1563017030238},{"_id":"public/categories/Hexo/index.html","hash":"f1e28489a01f2082a16e53320bf391b9b589eea8","modified":1563017030238},{"_id":"public/categories/Java/index.html","hash":"c8d1c7767e2aff0697eb36519f86f40439341c6e","modified":1563017030238},{"_id":"public/2019/05/29/markdown学习/index.html","hash":"1e9249b7293f5307933facd13dfeb7a78bae432b","modified":1563017030235},{"_id":"public/index.html","hash":"945903c55cec60f68968f0c1f17463e317c442e4","modified":1563017030238},{"_id":"public/categories/Git/index.html","hash":"43dad67f50bf5b8d1c91215fd44ec734fd249f86","modified":1563017030238},{"_id":"public/categories/LeetCode/index.html","hash":"a3133b7f73928e30dcacd5913ddebc7c19ec46ec","modified":1563017030238},{"_id":"public/tags/语法/index.html","hash":"0a4d2ddba0135e6067d67a34522a44305402a132","modified":1563017030239},{"_id":"public/tags/Markdown/index.html","hash":"632dd646ddcac4010520b7d7a9be7df25ae5bc3f","modified":1563017030239},{"_id":"public/tags/Dredd/index.html","hash":"efa5ffa330171eda188003dc79ee43c65b1ad310","modified":1563017030239},{"_id":"public/tags/Hexo/index.html","hash":"32593477f87e1cf3f47fbc5882e155d6306d2f70","modified":1563017030240},{"_id":"public/tags/Apiary/index.html","hash":"1a35f3242230db6b8ab5c6dbc3ca3be41cf6f86d","modified":1563017030239},{"_id":"public/tags/命令/index.html","hash":"4c7fc38f25747203f387b91d7af691eadfd6f44f","modified":1563017030240},{"_id":"public/tags/Json/index.html","hash":"8137d96ea0b806d34611a16e264614e30279b706","modified":1563017030240},{"_id":"public/tags/Error/index.html","hash":"d5dbbcc69cfe4c484b983f399cf306f55667da7e","modified":1563017030240},{"_id":"public/tags/字符串/index.html","hash":"c95898e4268fa000fd824878130ae090f48551d1","modified":1563017030241},{"_id":"public/tags/Medium/index.html","hash":"ccbc1c1d24cef4b755a3a0286686c475a4400802","modified":1563017030241},{"_id":"public/tags/Git/index.html","hash":"11f10482f36496594e7331f08798f7e9980b7c1e","modified":1563017030240},{"_id":"public/tags/题解/index.html","hash":"01f964d5c80f8e0fa5ed33a49b6b43f3db9deb9b","modified":1563017030241},{"_id":"public/tags/Shadowsocks/index.html","hash":"d482d133f666c21edf5bd4834f9ab424d0088b6b","modified":1563017030249},{"_id":"public/tags/动态规划/index.html","hash":"801b153ee4333aeb9c2ac802946db998fe45b941","modified":1563017030241},{"_id":"public/tags/Linux/index.html","hash":"e3a85d707962f09a6275979bc14e02492fa029c8","modified":1563017030249},{"_id":"public/tags/Easy/index.html","hash":"59196cae406f60317b90d2c7fcf6cfb7e2fdef08","modified":1563017030249},{"_id":"public/tags/差分/index.html","hash":"93e8a8a8dffa6d2db0eb6de7b821a90ab4124bbd","modified":1563017030249},{"_id":"public/archives/page/2/index.html","hash":"61ec15754b851adc6909f9ff5dbe46678c84ab9f","modified":1563017030236},{"_id":"public/archives/2019/page/2/index.html","hash":"b182c33aa26e75cf7f27024057c5d7d3aa0b4a9a","modified":1563017030236},{"_id":"public/page/2/index.html","hash":"186a7c2088bc883ee5414f311916c8d3f5d347b5","modified":1563017030239},{"_id":"public/tags/递归/index.html","hash":"9a46bf8c18c0988399e38d75fb1fb1835ec57f77","modified":1563017030248},{"_id":"public/images/speed.png","hash":"5567ef64d242d4603cc3b7c19d6db45cc2a69475","modified":1563009189950},{"_id":"public/images/tree.png","hash":"76ea1afe64b552a13bb0bd973c7b573b30e2edd3","modified":1563009189950},{"_id":"public/images/201906010.jpeg","hash":"46af2f27c469c122c3348689efc0945e188c4444","modified":1563009189950},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1563009189950},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1563009189950},{"_id":"public/images/avatar.jpg","hash":"ef5732a31948a9bea83013434f6a1f6222eb910d","modified":1563009189951},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1563009189951},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1563009189951},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1563009189951},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1563009189951},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1563009189951},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1563009189951},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1563009189952},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1563009189952},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1563009189952},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1563009189953},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1563009189953},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1563009189953},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1563009189953},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1563009189953},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1563009189954},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1563009189954},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1563009189954},{"_id":"public/lib/font-awesome/less/animated.less","hash":"472ec14f388c90a7201861e77faec317d038fd9c","modified":1563009189954},{"_id":"public/lib/font-awesome/less/core.less","hash":"5f436a1afd7f1de7dde20ed8c2fd84812b8acf12","modified":1563009189954},{"_id":"public/lib/font-awesome/less/fixed-width.less","hash":"a9552c8a91766a6d926c43c4c0f74acb62aaf719","modified":1563009189954},{"_id":"public/lib/font-awesome/less/bordered-pulled.less","hash":"66dc98ad0e4151e8938350f1ee3d0932348b37e8","modified":1563009189954},{"_id":"public/lib/font-awesome/less/font-awesome.less","hash":"06bd9cd5c5a646b1c631ba7b1edb77f60d84a91b","modified":1563009189954},{"_id":"public/lib/font-awesome/less/rotated-flipped.less","hash":"39ec6a3d98e5a55a2330935d139f95855c139dcf","modified":1563009189954},{"_id":"public/lib/font-awesome/less/list.less","hash":"2b203f3bacd6eaa58d0aa11efb9fb661b884eeb9","modified":1563009189954},{"_id":"public/lib/font-awesome/less/larger.less","hash":"d9610d7f83b0aaf3fdd5fa048117bd8620adf346","modified":1563009189955},{"_id":"public/lib/font-awesome/less/screen-reader.less","hash":"3fa86249735534461a08afa86b5d7d774de7ef3f","modified":1563009189955},{"_id":"public/lib/font-awesome/less/mixins.less","hash":"9b53403a944d93c5d7238c8942534fccf7957cff","modified":1563009189955},{"_id":"public/lib/font-awesome/less/stacked.less","hash":"ee10b7a0bc941f8d0bbd092d4178b9fae9f1661f","modified":1563009189955},{"_id":"public/lib/font-awesome/less/path.less","hash":"fce36570fe54da40c1c61f20d62bf9751a81a27e","modified":1563009189956},{"_id":"public/lib/font-awesome/scss/font-awesome.scss","hash":"6bfc7e75fd344628b06d85f7fa4d48b106334584","modified":1563009189956},{"_id":"public/lib/font-awesome/less/variables.less","hash":"e0dab04318d43211435c82989fbc05d0876b2708","modified":1563009189956},{"_id":"public/images/dog.jpg","hash":"b5303ad1ecaa7ac940d9cb9ee1889fa4ffd57a5c","modified":1563009190778},{"_id":"public/images/gitreset.png","hash":"b064c57748294cb7467e81477de4636321073e54","modified":1563009190778},{"_id":"public/lib/font-awesome/less/icons.less","hash":"e7492081853b880643f96e28659218b92c6e660a","modified":1563009190779},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1563009190779},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1563009190779},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1563009190780},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1563009190780},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1563009190780},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1563009190780},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1563009190780},{"_id":"public/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1563009190781},{"_id":"public/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1563009190781},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1563009190781},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1563009190781},{"_id":"public/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1563009190781},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1563009190781},{"_id":"public/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1563009190781},{"_id":"public/css/main.css","hash":"abeb668c4b024c32357b341ff203f5a251b5195f","modified":1563009190781},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1563009190781},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1563009190781},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1563009190781},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1563009190782},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1563009190782},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1563009190782},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1563009190782},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1563009190782},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1563009190839},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1563009190853}],"Category":[{"name":"工具","_id":"cjy1bbae0000dokujtlgha3gp"},{"name":"测试","_id":"cjy1bbae8000fokujifrh18sr"},{"name":"Hexo","_id":"cjy1bbae9000hokuj8weixy0d"},{"name":"Git","_id":"cjy1bbaeb000jokujt2bzaud7"},{"name":"Java","_id":"cjy1bbaec000lokujs93307rg"},{"name":"LeetCode","_id":"cjy1bbaed000nokujn64yg0um"}],"Data":[],"Page":[{"title":"categories","date":"2018-06-06T07:51:38.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-06-06 15:51:38\ntype: \"categories\"\n---\n","updated":"2019-06-02T01:47:45.815Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjy1bba660000okujtk2vjlln","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-06-06T07:48:55.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-06-06 15:48:55\ntype: \"tags\"\n---\n","updated":"2019-06-02T01:47:45.817Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjy1bba6j0002okuj0okjkp42","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Markdown学习","date":"2019-05-29T12:29:57.000Z","_content":"> 使用hexo必然要会markdown语法，在github上找了一些，然后自己在这里再实战一下，并在以后不断实践，争取不再需要这篇blog。\n<!--more-->\n用（`#`加一个空格）开始各级标题\n# 一级题目\n## 二级题目\n### 三级标题\n·\n·\n·\n###### 六级标题\n\n\n这是新的一段文字(段落前后空一行)\n\n`>`表示一个区块引用\n> 区块引用\n\n代码块，每行开头空四格或者使用\\`\\`\\`，然后再\n```java\npublic static void main(String[] args){\n\tSystem.out.println(\"这里是java代码\")'\n}\n```\n\n一个\\*斜体，两个\\*\\*粗体，三个\\*\\*\\*分割线\n*斜体*\n**粗体**\n***\n\n用+-·表示一个无序表\n+ 无序表\n+ 无序表\n\n数字加`.`表示有序表\n1. 第一项\n2. 第二项\n\n\n链接用\\[\\]加\\(\\)表示链接,图片在\\[\\]前面加\\!\n[](https://www.baidu.com)\n\n![小狗图片](/images/dog.jpg)\n\n用\\`\\`引起来表示符号变量\n`变量（符号）`\n\n\\表示转义，本文中的符号就是用\\来表现的\n\n表格用`|`实现，用和`-`和`:`实现对齐，下列为居中对齐：\n```\n|a|b|\n|:-:|:-:|\n|1|2|\n```\n|a|b|\n|:-:|:-:|\n|1|2|","source":"_posts/2019-05-29-markdown学习.md","raw":"---\ntitle: Markdown学习\ndate: 2019-05-29 20:29:57\ntags: [Markdown,语法]\ncategories: 工具\n---\n> 使用hexo必然要会markdown语法，在github上找了一些，然后自己在这里再实战一下，并在以后不断实践，争取不再需要这篇blog。\n<!--more-->\n用（`#`加一个空格）开始各级标题\n# 一级题目\n## 二级题目\n### 三级标题\n·\n·\n·\n###### 六级标题\n\n\n这是新的一段文字(段落前后空一行)\n\n`>`表示一个区块引用\n> 区块引用\n\n代码块，每行开头空四格或者使用\\`\\`\\`，然后再\n```java\npublic static void main(String[] args){\n\tSystem.out.println(\"这里是java代码\")'\n}\n```\n\n一个\\*斜体，两个\\*\\*粗体，三个\\*\\*\\*分割线\n*斜体*\n**粗体**\n***\n\n用+-·表示一个无序表\n+ 无序表\n+ 无序表\n\n数字加`.`表示有序表\n1. 第一项\n2. 第二项\n\n\n链接用\\[\\]加\\(\\)表示链接,图片在\\[\\]前面加\\!\n[](https://www.baidu.com)\n\n![小狗图片](/images/dog.jpg)\n\n用\\`\\`引起来表示符号变量\n`变量（符号）`\n\n\\表示转义，本文中的符号就是用\\来表现的\n\n表格用`|`实现，用和`-`和`:`实现对齐，下列为居中对齐：\n```\n|a|b|\n|:-:|:-:|\n|1|2|\n```\n|a|b|\n|:-:|:-:|\n|1|2|","slug":"markdown学习","published":1,"updated":"2019-07-05T11:39:41.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy1bba6a0001okujc0apsrhz","content":"<blockquote>\n<p>使用hexo必然要会markdown语法，在github上找了一些，然后自己在这里再实战一下，并在以后不断实践，争取不再需要这篇blog。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>用（<code>#</code>加一个空格）开始各级标题</p>\n<h1 id=\"一级题目\"><a href=\"#一级题目\" class=\"headerlink\" title=\"一级题目\"></a>一级题目</h1><h2 id=\"二级题目\"><a href=\"#二级题目\" class=\"headerlink\" title=\"二级题目\"></a>二级题目</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><p>·\n·<br>·</p>\n<h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><p>这是新的一段文字(段落前后空一行)</p>\n<p><code>&gt;</code>表示一个区块引用</p>\n<blockquote>\n<p>区块引用</p>\n</blockquote>\n<p>代码块，每行开头空四格或者使用```，然后再</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"这里是java代码\"</span>)<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一个*斜体，两个**粗体，三个***分割线<br><em>斜体</em><br><strong>粗体</strong></p>\n<hr>\n<p>用+-·表示一个无序表</p>\n<ul>\n<li>无序表</li>\n<li>无序表</li>\n</ul>\n<p>数字加<code>.</code>表示有序表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<p>链接用[]加()表示链接,图片在[]前面加!<br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p><img src=\"/images/dog.jpg\" alt=\"小狗图片\"></p>\n<p>用``引起来表示符号变量<br><code>变量（符号）</code></p>\n<p>\\表示转义，本文中的符号就是用\\来表现的</p>\n<p>表格用<code>|</code>实现，用和<code>-</code>和<code>:</code>实现对齐，下列为居中对齐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|a|b|</span><br><span class=\"line\">|:-:|:-:|</span><br><span class=\"line\">|1|2|</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">a</th>\n<th align=\"center\">b</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>使用hexo必然要会markdown语法，在github上找了一些，然后自己在这里再实战一下，并在以后不断实践，争取不再需要这篇blog。</p>\n</blockquote>","more":"<p>用（<code>#</code>加一个空格）开始各级标题</p>\n<h1 id=\"一级题目\"><a href=\"#一级题目\" class=\"headerlink\" title=\"一级题目\"></a>一级题目</h1><h2 id=\"二级题目\"><a href=\"#二级题目\" class=\"headerlink\" title=\"二级题目\"></a>二级题目</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><p>·\n·<br>·</p>\n<h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><p>这是新的一段文字(段落前后空一行)</p>\n<p><code>&gt;</code>表示一个区块引用</p>\n<blockquote>\n<p>区块引用</p>\n</blockquote>\n<p>代码块，每行开头空四格或者使用```，然后再</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"这里是java代码\"</span>)<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一个*斜体，两个**粗体，三个***分割线<br><em>斜体</em><br><strong>粗体</strong></p>\n<hr>\n<p>用+-·表示一个无序表</p>\n<ul>\n<li>无序表</li>\n<li>无序表</li>\n</ul>\n<p>数字加<code>.</code>表示有序表</p>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n</ol>\n<p>链接用[]加()表示链接,图片在[]前面加!<br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p><img src=\"/images/dog.jpg\" alt=\"小狗图片\"></p>\n<p>用``引起来表示符号变量<br><code>变量（符号）</code></p>\n<p>\\表示转义，本文中的符号就是用\\来表现的</p>\n<p>表格用<code>|</code>实现，用和<code>-</code>和<code>:</code>实现对齐，下列为居中对齐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|a|b|</span><br><span class=\"line\">|:-:|:-:|</span><br><span class=\"line\">|1|2|</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">a</th>\n<th align=\"center\">b</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody></table>"},{"title":"dredd study","date":"2019-06-18T13:40:54.000Z","_content":"> 最近被要求学习利用[apirary](https://help.apiary.io)进行测试，验证api文档与程序的一致性。apiary中的本地API测试工具是[dredd](https://help.apiary.io/tools/automated-testing/testing-local/)，在此记录如何用它对apiary中的文档进行验证。\n\n<!--more-->\n\n## 使用方法\n1. 首先下载node，再用如下命令安装：\n`npm install dredd --global`\n通过`dredd --version`查看版本\n2. `dredd init`\n按照提示完成后生成dredd.yml，dredd.yml整个任务的配置项，包括要验证的文档名，使用hook的语言，生成的报告要发往的位置等等。\n3. `dredd`\n运行测试程序，即可看到结果，如果配置了aipary的`id`的话，也可在apiary的Test部分看到带有颜色标记的测试结果。 \n\n## 生命周期\n*由于要使用到`hook`,先介绍一下dredd的声明周期，便于知道何时使用hook。*\n1. 解析apiary文档，报告解析错误或者警告，发现格式问题。\n2. 预处理apiary文档，对URI中的属性、JSON体等进检查是否存在无效参数或缺少必要参数。\n3. 生成HTTP的`transaction`,包括将head头、参数、url中的属性集成到一起。\n4. 载入hooks\n5. 运行测试\n    + 运行`beforeAll`hook\n    + 对于每一个`transaction`：\n        + 依次运行`beforeEach`hook、`before`hook\n        + 发送HTTP请求\n        + 接受HTTP响应\n        + 运行`beforeEachValidation`hook\n        + 执行验证\n        + 运行`after`hook、`afterEach`hook\n    + 运行`afterAll`hook\n6. 发送详细报告\n\n## hook\n*hook是dreed中的最重要的部分，dredd支持的多种语言的hook,hook可以通过hook在请求前、响应后、比较前、比较后对特定一个或所有的transaction进行数据的修改，具体来说有如下一些作用：*\n1. 处理身份验证问题，比如`Authorization`\n2. 在`transaction`之间传递数据，例如`GET`的值用于`PUT`\n3. 修改`request`中的样例值\n4. 改变预期的期望值\n5. 在验证前修改`response`的值，以符合预期\n\n### hook的类型及其执行时期\n+ `beforeAll` 在整个测试运行之前执行，文档预运行之后\n+ `beforeEach` 在每个transaction之前\n+ `before` 在指定的transaction之前\n+ `beforeEachValidation` 在每个transaction的response和文档中的预期对比验证之前\n+ `beforeValidation` 在指定的transaction验证之前\n+ `after` 在指定的transaction完成之后去\n+ `afterEach` 在每个transaction完成之后\n+ `afterAll` 在整个测试完成之后\n\n## dredd的参数\n*dredd运行时有一些参数可以指定一些特殊行为,例如：*\n+ `--hookfiles, -f`指定hooks文件\n+ `--names, -n`只列出request的名称，不运行，这个名称就是上面的`before``after`中传入的参数，用于指定具体的transaction。\n+  `--only, -x`只运行指定的transaction\n+ `--sorted, -s`指定transaction的执行顺序，顺序如下\n: CONNECT, OPTIONS, POST, GET, HEAD, PUT, PATCH, DELETE, TRACE.\n\n\n","source":"_posts/2019-06-18-dredd-study.md","raw":"---\ntitle: dredd study\ndate: 2019-06-18 21:40:54\ntags:\n- Dredd\n- Apiary\ncategories:\n- 测试\n---\n> 最近被要求学习利用[apirary](https://help.apiary.io)进行测试，验证api文档与程序的一致性。apiary中的本地API测试工具是[dredd](https://help.apiary.io/tools/automated-testing/testing-local/)，在此记录如何用它对apiary中的文档进行验证。\n\n<!--more-->\n\n## 使用方法\n1. 首先下载node，再用如下命令安装：\n`npm install dredd --global`\n通过`dredd --version`查看版本\n2. `dredd init`\n按照提示完成后生成dredd.yml，dredd.yml整个任务的配置项，包括要验证的文档名，使用hook的语言，生成的报告要发往的位置等等。\n3. `dredd`\n运行测试程序，即可看到结果，如果配置了aipary的`id`的话，也可在apiary的Test部分看到带有颜色标记的测试结果。 \n\n## 生命周期\n*由于要使用到`hook`,先介绍一下dredd的声明周期，便于知道何时使用hook。*\n1. 解析apiary文档，报告解析错误或者警告，发现格式问题。\n2. 预处理apiary文档，对URI中的属性、JSON体等进检查是否存在无效参数或缺少必要参数。\n3. 生成HTTP的`transaction`,包括将head头、参数、url中的属性集成到一起。\n4. 载入hooks\n5. 运行测试\n    + 运行`beforeAll`hook\n    + 对于每一个`transaction`：\n        + 依次运行`beforeEach`hook、`before`hook\n        + 发送HTTP请求\n        + 接受HTTP响应\n        + 运行`beforeEachValidation`hook\n        + 执行验证\n        + 运行`after`hook、`afterEach`hook\n    + 运行`afterAll`hook\n6. 发送详细报告\n\n## hook\n*hook是dreed中的最重要的部分，dredd支持的多种语言的hook,hook可以通过hook在请求前、响应后、比较前、比较后对特定一个或所有的transaction进行数据的修改，具体来说有如下一些作用：*\n1. 处理身份验证问题，比如`Authorization`\n2. 在`transaction`之间传递数据，例如`GET`的值用于`PUT`\n3. 修改`request`中的样例值\n4. 改变预期的期望值\n5. 在验证前修改`response`的值，以符合预期\n\n### hook的类型及其执行时期\n+ `beforeAll` 在整个测试运行之前执行，文档预运行之后\n+ `beforeEach` 在每个transaction之前\n+ `before` 在指定的transaction之前\n+ `beforeEachValidation` 在每个transaction的response和文档中的预期对比验证之前\n+ `beforeValidation` 在指定的transaction验证之前\n+ `after` 在指定的transaction完成之后去\n+ `afterEach` 在每个transaction完成之后\n+ `afterAll` 在整个测试完成之后\n\n## dredd的参数\n*dredd运行时有一些参数可以指定一些特殊行为,例如：*\n+ `--hookfiles, -f`指定hooks文件\n+ `--names, -n`只列出request的名称，不运行，这个名称就是上面的`before``after`中传入的参数，用于指定具体的transaction。\n+  `--only, -x`只运行指定的transaction\n+ `--sorted, -s`指定transaction的执行顺序，顺序如下\n: CONNECT, OPTIONS, POST, GET, HEAD, PUT, PATCH, DELETE, TRACE.\n\n\n","slug":"dredd-study","published":1,"updated":"2019-07-05T11:43:25.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy1bba6k0003okuj2bb9ojz2","content":"<blockquote>\n<p>最近被要求学习利用<a href=\"https://help.apiary.io\" target=\"_blank\" rel=\"noopener\">apirary</a>进行测试，验证api文档与程序的一致性。apiary中的本地API测试工具是<a href=\"https://help.apiary.io/tools/automated-testing/testing-local/\" target=\"_blank\" rel=\"noopener\">dredd</a>，在此记录如何用它对apiary中的文档进行验证。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ol>\n<li>首先下载node，再用如下命令安装：<br><code>npm install dredd --global</code><br>通过<code>dredd --version</code>查看版本</li>\n<li><code>dredd init</code><br>按照提示完成后生成dredd.yml，dredd.yml整个任务的配置项，包括要验证的文档名，使用hook的语言，生成的报告要发往的位置等等。</li>\n<li><code>dredd</code><br>运行测试程序，即可看到结果，如果配置了aipary的<code>id</code>的话，也可在apiary的Test部分看到带有颜色标记的测试结果。 </li>\n</ol>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p><em>由于要使用到<code>hook</code>,先介绍一下dredd的声明周期，便于知道何时使用hook。</em></p>\n<ol>\n<li>解析apiary文档，报告解析错误或者警告，发现格式问题。</li>\n<li>预处理apiary文档，对URI中的属性、JSON体等进检查是否存在无效参数或缺少必要参数。</li>\n<li>生成HTTP的<code>transaction</code>,包括将head头、参数、url中的属性集成到一起。</li>\n<li>载入hooks</li>\n<li>运行测试<ul>\n<li>运行<code>beforeAll</code>hook</li>\n<li>对于每一个<code>transaction</code>：<ul>\n<li>依次运行<code>beforeEach</code>hook、<code>before</code>hook</li>\n<li>发送HTTP请求</li>\n<li>接受HTTP响应</li>\n<li>运行<code>beforeEachValidation</code>hook</li>\n<li>执行验证</li>\n<li>运行<code>after</code>hook、<code>afterEach</code>hook</li>\n</ul>\n</li>\n<li>运行<code>afterAll</code>hook</li>\n</ul>\n</li>\n<li>发送详细报告</li>\n</ol>\n<h2 id=\"hook\"><a href=\"#hook\" class=\"headerlink\" title=\"hook\"></a>hook</h2><p><em>hook是dreed中的最重要的部分，dredd支持的多种语言的hook,hook可以通过hook在请求前、响应后、比较前、比较后对特定一个或所有的transaction进行数据的修改，具体来说有如下一些作用：</em></p>\n<ol>\n<li>处理身份验证问题，比如<code>Authorization</code></li>\n<li>在<code>transaction</code>之间传递数据，例如<code>GET</code>的值用于<code>PUT</code></li>\n<li>修改<code>request</code>中的样例值</li>\n<li>改变预期的期望值</li>\n<li>在验证前修改<code>response</code>的值，以符合预期</li>\n</ol>\n<h3 id=\"hook的类型及其执行时期\"><a href=\"#hook的类型及其执行时期\" class=\"headerlink\" title=\"hook的类型及其执行时期\"></a>hook的类型及其执行时期</h3><ul>\n<li><code>beforeAll</code> 在整个测试运行之前执行，文档预运行之后</li>\n<li><code>beforeEach</code> 在每个transaction之前</li>\n<li><code>before</code> 在指定的transaction之前</li>\n<li><code>beforeEachValidation</code> 在每个transaction的response和文档中的预期对比验证之前</li>\n<li><code>beforeValidation</code> 在指定的transaction验证之前</li>\n<li><code>after</code> 在指定的transaction完成之后去</li>\n<li><code>afterEach</code> 在每个transaction完成之后</li>\n<li><code>afterAll</code> 在整个测试完成之后</li>\n</ul>\n<h2 id=\"dredd的参数\"><a href=\"#dredd的参数\" class=\"headerlink\" title=\"dredd的参数\"></a>dredd的参数</h2><p><em>dredd运行时有一些参数可以指定一些特殊行为,例如：</em></p>\n<ul>\n<li><code>--hookfiles, -f</code>指定hooks文件</li>\n<li><code>--names, -n</code>只列出request的名称，不运行，这个名称就是上面的<code>before``after</code>中传入的参数，用于指定具体的transaction。</li>\n<li><code>--only, -x</code>只运行指定的transaction</li>\n<li><code>--sorted, -s</code>指定transaction的执行顺序，顺序如下<br>: CONNECT, OPTIONS, POST, GET, HEAD, PUT, PATCH, DELETE, TRACE.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近被要求学习利用<a href=\"https://help.apiary.io\" target=\"_blank\" rel=\"noopener\">apirary</a>进行测试，验证api文档与程序的一致性。apiary中的本地API测试工具是<a href=\"https://help.apiary.io/tools/automated-testing/testing-local/\" target=\"_blank\" rel=\"noopener\">dredd</a>，在此记录如何用它对apiary中的文档进行验证。</p>\n</blockquote>","more":"<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ol>\n<li>首先下载node，再用如下命令安装：<br><code>npm install dredd --global</code><br>通过<code>dredd --version</code>查看版本</li>\n<li><code>dredd init</code><br>按照提示完成后生成dredd.yml，dredd.yml整个任务的配置项，包括要验证的文档名，使用hook的语言，生成的报告要发往的位置等等。</li>\n<li><code>dredd</code><br>运行测试程序，即可看到结果，如果配置了aipary的<code>id</code>的话，也可在apiary的Test部分看到带有颜色标记的测试结果。 </li>\n</ol>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p><em>由于要使用到<code>hook</code>,先介绍一下dredd的声明周期，便于知道何时使用hook。</em></p>\n<ol>\n<li>解析apiary文档，报告解析错误或者警告，发现格式问题。</li>\n<li>预处理apiary文档，对URI中的属性、JSON体等进检查是否存在无效参数或缺少必要参数。</li>\n<li>生成HTTP的<code>transaction</code>,包括将head头、参数、url中的属性集成到一起。</li>\n<li>载入hooks</li>\n<li>运行测试<ul>\n<li>运行<code>beforeAll</code>hook</li>\n<li>对于每一个<code>transaction</code>：<ul>\n<li>依次运行<code>beforeEach</code>hook、<code>before</code>hook</li>\n<li>发送HTTP请求</li>\n<li>接受HTTP响应</li>\n<li>运行<code>beforeEachValidation</code>hook</li>\n<li>执行验证</li>\n<li>运行<code>after</code>hook、<code>afterEach</code>hook</li>\n</ul>\n</li>\n<li>运行<code>afterAll</code>hook</li>\n</ul>\n</li>\n<li>发送详细报告</li>\n</ol>\n<h2 id=\"hook\"><a href=\"#hook\" class=\"headerlink\" title=\"hook\"></a>hook</h2><p><em>hook是dreed中的最重要的部分，dredd支持的多种语言的hook,hook可以通过hook在请求前、响应后、比较前、比较后对特定一个或所有的transaction进行数据的修改，具体来说有如下一些作用：</em></p>\n<ol>\n<li>处理身份验证问题，比如<code>Authorization</code></li>\n<li>在<code>transaction</code>之间传递数据，例如<code>GET</code>的值用于<code>PUT</code></li>\n<li>修改<code>request</code>中的样例值</li>\n<li>改变预期的期望值</li>\n<li>在验证前修改<code>response</code>的值，以符合预期</li>\n</ol>\n<h3 id=\"hook的类型及其执行时期\"><a href=\"#hook的类型及其执行时期\" class=\"headerlink\" title=\"hook的类型及其执行时期\"></a>hook的类型及其执行时期</h3><ul>\n<li><code>beforeAll</code> 在整个测试运行之前执行，文档预运行之后</li>\n<li><code>beforeEach</code> 在每个transaction之前</li>\n<li><code>before</code> 在指定的transaction之前</li>\n<li><code>beforeEachValidation</code> 在每个transaction的response和文档中的预期对比验证之前</li>\n<li><code>beforeValidation</code> 在指定的transaction验证之前</li>\n<li><code>after</code> 在指定的transaction完成之后去</li>\n<li><code>afterEach</code> 在每个transaction完成之后</li>\n<li><code>afterAll</code> 在整个测试完成之后</li>\n</ul>\n<h2 id=\"dredd的参数\"><a href=\"#dredd的参数\" class=\"headerlink\" title=\"dredd的参数\"></a>dredd的参数</h2><p><em>dredd运行时有一些参数可以指定一些特殊行为,例如：</em></p>\n<ul>\n<li><code>--hookfiles, -f</code>指定hooks文件</li>\n<li><code>--names, -n</code>只列出request的名称，不运行，这个名称就是上面的<code>before``after</code>中传入的参数，用于指定具体的transaction。</li>\n<li><code>--only, -x</code>只运行指定的transaction</li>\n<li><code>--sorted, -s</code>指定transaction的执行顺序，顺序如下<br>: CONNECT, OPTIONS, POST, GET, HEAD, PUT, PATCH, DELETE, TRACE.</li>\n</ul>"},{"title":"Hexo采坑记录","date":"2019-06-01T14:36:39.000Z","_content":"\n\n> 在用hexo搭建个人博客的的时候遇到了各种问题，想着比人也可能遇到，于是记录于此，以后若遇到新的关于hexo的问题，也将持续更新到本文。\n\n<!--more-->\n\n## 1. hexo目录结构\n先了解hexo的目录结构，以及各个目录、文件作用是什么，遇到某些问题，自己也能尝试搞定，同时查到解决方法后也能很容易理解为何这样做。下面是我的hexo目录结构，有些文件夹没有展开，我在后面加上`/`。\n\n+ `themes`是主题文件夹，就是界面展示的布局风格，我选择的`next`。\n+ `source`最重要的文件夹，存放博客的源文件。\n+ `public`和`.deploy_git`存放的内容都是生成的静态文件，区别我认为`.deploy_git`是已经发布到博客了的，即是`hexo d`产生的。而public是刚刚生成的，即`hexo g`产生的。\n+ `scaffolds`是存放模板的文件夹，即`hexo new [layout] <filename>`中的`layout`选择项，默认`post.md`发布模板，`draft.md`草稿模板，`page.md`页面模板(不清楚)。`node_modules`是根据`package.json`和`package-lock.json`下载的`node`包，`_config.yml`是博客的配置文件。\n+ `db.json`对文件资源进行记录。\n+ `yarn.lock`是`yarn`命令安装模块时使用的。\n+ `dubug.json`记录本地`hexo server`产生的日志。\n\n重要的文件有三个：\n\n1. `source`文件夹\n2. 根目录下的`_config.yml`\n3. `themes`文件下主题文件中的`_config.yml`文件\n\n复制这三个，就可以随意迁移博客了。\n\n## 2. `themes`文件夹下的`next`内容不会被`push`到`github`\n估计因为`next`主题本身也是`github`项目，我在将其中的`.git`和`.gitignore`删除后，再`git rm -r --cached next`，取消对`next`之前的追踪记录。\n后就可以了，重要的应该是`git`命令。`.git`删除后，现在我无法更新`next`了……\n\n## 3. `_config.yml`中`develop`设置发布到`master`分支\n这是完全覆盖式的，将导致`master`分支之前的内容被抹掉。因此在设置哪个分支作为发布的分支要小心。\n\n## 4. `menu`的图标无法显示\n`menu`的图标用的是`font-awesome`的，本来当运行`hexo g`的时候会在`/lib`文件下生成`font-awesome`文件夹，里面有所用的所有图标，但我的没有生成这个文件夹。\n解决方法：自己去`font-awesome`网站下载，然后放到`lib`目录下。\n\n\n","source":"_posts/2019-06-01-hexo踩坑记录.md","raw":"---\ntitle: Hexo采坑记录\ntags:\n  - Hexo\n  - Error\ndate: 2019-06-01 22:36:39\ncategories:\n- Hexo\n---\n\n\n> 在用hexo搭建个人博客的的时候遇到了各种问题，想着比人也可能遇到，于是记录于此，以后若遇到新的关于hexo的问题，也将持续更新到本文。\n\n<!--more-->\n\n## 1. hexo目录结构\n先了解hexo的目录结构，以及各个目录、文件作用是什么，遇到某些问题，自己也能尝试搞定，同时查到解决方法后也能很容易理解为何这样做。下面是我的hexo目录结构，有些文件夹没有展开，我在后面加上`/`。\n\n+ `themes`是主题文件夹，就是界面展示的布局风格，我选择的`next`。\n+ `source`最重要的文件夹，存放博客的源文件。\n+ `public`和`.deploy_git`存放的内容都是生成的静态文件，区别我认为`.deploy_git`是已经发布到博客了的，即是`hexo d`产生的。而public是刚刚生成的，即`hexo g`产生的。\n+ `scaffolds`是存放模板的文件夹，即`hexo new [layout] <filename>`中的`layout`选择项，默认`post.md`发布模板，`draft.md`草稿模板，`page.md`页面模板(不清楚)。`node_modules`是根据`package.json`和`package-lock.json`下载的`node`包，`_config.yml`是博客的配置文件。\n+ `db.json`对文件资源进行记录。\n+ `yarn.lock`是`yarn`命令安装模块时使用的。\n+ `dubug.json`记录本地`hexo server`产生的日志。\n\n重要的文件有三个：\n\n1. `source`文件夹\n2. 根目录下的`_config.yml`\n3. `themes`文件下主题文件中的`_config.yml`文件\n\n复制这三个，就可以随意迁移博客了。\n\n## 2. `themes`文件夹下的`next`内容不会被`push`到`github`\n估计因为`next`主题本身也是`github`项目，我在将其中的`.git`和`.gitignore`删除后，再`git rm -r --cached next`，取消对`next`之前的追踪记录。\n后就可以了，重要的应该是`git`命令。`.git`删除后，现在我无法更新`next`了……\n\n## 3. `_config.yml`中`develop`设置发布到`master`分支\n这是完全覆盖式的，将导致`master`分支之前的内容被抹掉。因此在设置哪个分支作为发布的分支要小心。\n\n## 4. `menu`的图标无法显示\n`menu`的图标用的是`font-awesome`的，本来当运行`hexo g`的时候会在`/lib`文件下生成`font-awesome`文件夹，里面有所用的所有图标，但我的没有生成这个文件夹。\n解决方法：自己去`font-awesome`网站下载，然后放到`lib`目录下。\n\n\n","slug":"hexo踩坑记录","published":1,"updated":"2019-07-05T11:40:26.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy1bba6n0004okuj6y9nl0i8","content":"<blockquote>\n<p>在用hexo搭建个人博客的的时候遇到了各种问题，想着比人也可能遇到，于是记录于此，以后若遇到新的关于hexo的问题，也将持续更新到本文。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"1-hexo目录结构\"><a href=\"#1-hexo目录结构\" class=\"headerlink\" title=\"1. hexo目录结构\"></a>1. hexo目录结构</h2><p>先了解hexo的目录结构，以及各个目录、文件作用是什么，遇到某些问题，自己也能尝试搞定，同时查到解决方法后也能很容易理解为何这样做。下面是我的hexo目录结构，有些文件夹没有展开，我在后面加上<code>/</code>。</p>\n<ul>\n<li><code>themes</code>是主题文件夹，就是界面展示的布局风格，我选择的<code>next</code>。</li>\n<li><code>source</code>最重要的文件夹，存放博客的源文件。</li>\n<li><code>public</code>和<code>.deploy_git</code>存放的内容都是生成的静态文件，区别我认为<code>.deploy_git</code>是已经发布到博客了的，即是<code>hexo d</code>产生的。而public是刚刚生成的，即<code>hexo g</code>产生的。</li>\n<li><code>scaffolds</code>是存放模板的文件夹，即<code>hexo new [layout] &lt;filename&gt;</code>中的<code>layout</code>选择项，默认<code>post.md</code>发布模板，<code>draft.md</code>草稿模板，<code>page.md</code>页面模板(不清楚)。<code>node_modules</code>是根据<code>package.json</code>和<code>package-lock.json</code>下载的<code>node</code>包，<code>_config.yml</code>是博客的配置文件。</li>\n<li><code>db.json</code>对文件资源进行记录。</li>\n<li><code>yarn.lock</code>是<code>yarn</code>命令安装模块时使用的。</li>\n<li><code>dubug.json</code>记录本地<code>hexo server</code>产生的日志。</li>\n</ul>\n<p>重要的文件有三个：</p>\n<ol>\n<li><code>source</code>文件夹</li>\n<li>根目录下的<code>_config.yml</code></li>\n<li><code>themes</code>文件下主题文件中的<code>_config.yml</code>文件</li>\n</ol>\n<p>复制这三个，就可以随意迁移博客了。</p>\n<h2 id=\"2-themes文件夹下的next内容不会被push到github\"><a href=\"#2-themes文件夹下的next内容不会被push到github\" class=\"headerlink\" title=\"2. themes文件夹下的next内容不会被push到github\"></a>2. <code>themes</code>文件夹下的<code>next</code>内容不会被<code>push</code>到<code>github</code></h2><p>估计因为<code>next</code>主题本身也是<code>github</code>项目，我在将其中的<code>.git</code>和<code>.gitignore</code>删除后，再<code>git rm -r --cached next</code>，取消对<code>next</code>之前的追踪记录。<br>后就可以了，重要的应该是<code>git</code>命令。<code>.git</code>删除后，现在我无法更新<code>next</code>了……</p>\n<h2 id=\"3-config-yml中develop设置发布到master分支\"><a href=\"#3-config-yml中develop设置发布到master分支\" class=\"headerlink\" title=\"3. _config.yml中develop设置发布到master分支\"></a>3. <code>_config.yml</code>中<code>develop</code>设置发布到<code>master</code>分支</h2><p>这是完全覆盖式的，将导致<code>master</code>分支之前的内容被抹掉。因此在设置哪个分支作为发布的分支要小心。</p>\n<h2 id=\"4-menu的图标无法显示\"><a href=\"#4-menu的图标无法显示\" class=\"headerlink\" title=\"4. menu的图标无法显示\"></a>4. <code>menu</code>的图标无法显示</h2><p><code>menu</code>的图标用的是<code>font-awesome</code>的，本来当运行<code>hexo g</code>的时候会在<code>/lib</code>文件下生成<code>font-awesome</code>文件夹，里面有所用的所有图标，但我的没有生成这个文件夹。<br>解决方法：自己去<code>font-awesome</code>网站下载，然后放到<code>lib</code>目录下。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在用hexo搭建个人博客的的时候遇到了各种问题，想着比人也可能遇到，于是记录于此，以后若遇到新的关于hexo的问题，也将持续更新到本文。</p>\n</blockquote>","more":"<h2 id=\"1-hexo目录结构\"><a href=\"#1-hexo目录结构\" class=\"headerlink\" title=\"1. hexo目录结构\"></a>1. hexo目录结构</h2><p>先了解hexo的目录结构，以及各个目录、文件作用是什么，遇到某些问题，自己也能尝试搞定，同时查到解决方法后也能很容易理解为何这样做。下面是我的hexo目录结构，有些文件夹没有展开，我在后面加上<code>/</code>。</p>\n<ul>\n<li><code>themes</code>是主题文件夹，就是界面展示的布局风格，我选择的<code>next</code>。</li>\n<li><code>source</code>最重要的文件夹，存放博客的源文件。</li>\n<li><code>public</code>和<code>.deploy_git</code>存放的内容都是生成的静态文件，区别我认为<code>.deploy_git</code>是已经发布到博客了的，即是<code>hexo d</code>产生的。而public是刚刚生成的，即<code>hexo g</code>产生的。</li>\n<li><code>scaffolds</code>是存放模板的文件夹，即<code>hexo new [layout] &lt;filename&gt;</code>中的<code>layout</code>选择项，默认<code>post.md</code>发布模板，<code>draft.md</code>草稿模板，<code>page.md</code>页面模板(不清楚)。<code>node_modules</code>是根据<code>package.json</code>和<code>package-lock.json</code>下载的<code>node</code>包，<code>_config.yml</code>是博客的配置文件。</li>\n<li><code>db.json</code>对文件资源进行记录。</li>\n<li><code>yarn.lock</code>是<code>yarn</code>命令安装模块时使用的。</li>\n<li><code>dubug.json</code>记录本地<code>hexo server</code>产生的日志。</li>\n</ul>\n<p>重要的文件有三个：</p>\n<ol>\n<li><code>source</code>文件夹</li>\n<li>根目录下的<code>_config.yml</code></li>\n<li><code>themes</code>文件下主题文件中的<code>_config.yml</code>文件</li>\n</ol>\n<p>复制这三个，就可以随意迁移博客了。</p>\n<h2 id=\"2-themes文件夹下的next内容不会被push到github\"><a href=\"#2-themes文件夹下的next内容不会被push到github\" class=\"headerlink\" title=\"2. themes文件夹下的next内容不会被push到github\"></a>2. <code>themes</code>文件夹下的<code>next</code>内容不会被<code>push</code>到<code>github</code></h2><p>估计因为<code>next</code>主题本身也是<code>github</code>项目，我在将其中的<code>.git</code>和<code>.gitignore</code>删除后，再<code>git rm -r --cached next</code>，取消对<code>next</code>之前的追踪记录。<br>后就可以了，重要的应该是<code>git</code>命令。<code>.git</code>删除后，现在我无法更新<code>next</code>了……</p>\n<h2 id=\"3-config-yml中develop设置发布到master分支\"><a href=\"#3-config-yml中develop设置发布到master分支\" class=\"headerlink\" title=\"3. _config.yml中develop设置发布到master分支\"></a>3. <code>_config.yml</code>中<code>develop</code>设置发布到<code>master</code>分支</h2><p>这是完全覆盖式的，将导致<code>master</code>分支之前的内容被抹掉。因此在设置哪个分支作为发布的分支要小心。</p>\n<h2 id=\"4-menu的图标无法显示\"><a href=\"#4-menu的图标无法显示\" class=\"headerlink\" title=\"4. menu的图标无法显示\"></a>4. <code>menu</code>的图标无法显示</h2><p><code>menu</code>的图标用的是<code>font-awesome</code>的，本来当运行<code>hexo g</code>的时候会在<code>/lib</code>文件下生成<code>font-awesome</code>文件夹，里面有所用的所有图标，但我的没有生成这个文件夹。<br>解决方法：自己去<code>font-awesome</code>网站下载，然后放到<code>lib</code>目录下。</p>"},{"title":"Git常用的命令记录","date":"2019-06-01T14:36:10.000Z","_content":"\n> 在工作学习中经常要进行`git`操作，这里持续记录我常用到的各种命令以及在遇到的各种坑。\n\n<!--more-->\n\n先放一张图便于后续讲述：\n![工作区/暂存区/仓库(Head)](/images/201906010.jpeg)\n最最常用的：\n\n1. `git clone <remote_url> [foldname]`\n\n    *克隆远程仓库到本地，可设置本地文件夹名称*\n\n2. `git add [filename/.]`\n\n    *将修改的文件添加到暂存区*\n\n3. `git commit -m \"说明\"`\n\n    *将暂存区文件添加到分支*\n\n4. `git branch`\n\n    *分支管理，-b 创建并切换，-d 删除*\n\n5. `git checkout <branch>`\n\n    *切换分支*\n\n6. `git reset --hard <历史节点>`\n\n    *重置当前所有分区状态到某个历史节点*\n\n7. `git log`\n\n    *查看提交记录*\n\n8. `git push/pull`\n\n    *推送和拉取分支*\n\n9. `git rm --cached files`\n\n    *删除文件跟踪但不删创造文件系统中的文件,rm -f删除目录*\n10. `git branch -a`\n \n    *从远程clone了repo后，只会在本地默认创建一个master分支，此时-a查看所有分支*\n\n11. `git checkout -b <本地分支名> origin/<远程分支名>`\n \n    *创建本地分支并将其与远程分支关联*\n\n12. `git push origin :<删除的分支名>`\n    \n    *删除远程分支。利用git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。*\n\n13. `git rest --hard/soft/mixed(default)`\n\n    ![git rest图解](/images/gitreset.png)\n    \n    *回到上次提交(可以指定具体哪个提交)，三种模式:hard，直接替换本地工作区和暂存区，不保留本地的已编辑内容；soft,保留本地的修改，同时将指定节点之后的那些即将被舍弃的提交恢复到暂存区，因此你只要commit就会回到最后的节点；mixed，和soft相似，但是是将暂存区的内容和即将被舍弃的提交都保存到暂存区。*\n    *当commit了一些没用的代码，不想要了，重新开始就用hard,当你两次提交-m都是一样的内容，想合并，用soft;当add了一些代码进暂存区了，想撤销一些add,用mixed，全部回到工作区，再选择需要的进行add*\n","source":"_posts/2019-06-01-git踩坑记录.md","raw":"---\ntitle: Git常用的命令记录\ndate: 2019-06-01 22:36:10\ntags:\n- Git\n- 命令\ncategories:\n- Git \n---\n\n> 在工作学习中经常要进行`git`操作，这里持续记录我常用到的各种命令以及在遇到的各种坑。\n\n<!--more-->\n\n先放一张图便于后续讲述：\n![工作区/暂存区/仓库(Head)](/images/201906010.jpeg)\n最最常用的：\n\n1. `git clone <remote_url> [foldname]`\n\n    *克隆远程仓库到本地，可设置本地文件夹名称*\n\n2. `git add [filename/.]`\n\n    *将修改的文件添加到暂存区*\n\n3. `git commit -m \"说明\"`\n\n    *将暂存区文件添加到分支*\n\n4. `git branch`\n\n    *分支管理，-b 创建并切换，-d 删除*\n\n5. `git checkout <branch>`\n\n    *切换分支*\n\n6. `git reset --hard <历史节点>`\n\n    *重置当前所有分区状态到某个历史节点*\n\n7. `git log`\n\n    *查看提交记录*\n\n8. `git push/pull`\n\n    *推送和拉取分支*\n\n9. `git rm --cached files`\n\n    *删除文件跟踪但不删创造文件系统中的文件,rm -f删除目录*\n10. `git branch -a`\n \n    *从远程clone了repo后，只会在本地默认创建一个master分支，此时-a查看所有分支*\n\n11. `git checkout -b <本地分支名> origin/<远程分支名>`\n \n    *创建本地分支并将其与远程分支关联*\n\n12. `git push origin :<删除的分支名>`\n    \n    *删除远程分支。利用git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。*\n\n13. `git rest --hard/soft/mixed(default)`\n\n    ![git rest图解](/images/gitreset.png)\n    \n    *回到上次提交(可以指定具体哪个提交)，三种模式:hard，直接替换本地工作区和暂存区，不保留本地的已编辑内容；soft,保留本地的修改，同时将指定节点之后的那些即将被舍弃的提交恢复到暂存区，因此你只要commit就会回到最后的节点；mixed，和soft相似，但是是将暂存区的内容和即将被舍弃的提交都保存到暂存区。*\n    *当commit了一些没用的代码，不想要了，重新开始就用hard,当你两次提交-m都是一样的内容，想合并，用soft;当add了一些代码进暂存区了，想撤销一些add,用mixed，全部回到工作区，再选择需要的进行add*\n","slug":"git踩坑记录","published":1,"updated":"2019-07-06T11:57:17.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy1bba6p0005okujgl7e38cp","content":"<blockquote>\n<p>在工作学习中经常要进行<code>git</code>操作，这里持续记录我常用到的各种命令以及在遇到的各种坑。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>先放一张图便于后续讲述：<br><img src=\"/images/201906010.jpeg\" alt=\"工作区/暂存区/仓库(Head)\"><br>最最常用的：</p>\n<ol>\n<li><p><code>git clone &lt;remote_url&gt; [foldname]</code></p>\n<p> <em>克隆远程仓库到本地，可设置本地文件夹名称</em></p>\n</li>\n<li><p><code>git add [filename/.]</code></p>\n<p> <em>将修改的文件添加到暂存区</em></p>\n</li>\n<li><p><code>git commit -m &quot;说明&quot;</code></p>\n<p> <em>将暂存区文件添加到分支</em></p>\n</li>\n<li><p><code>git branch</code></p>\n<p> <em>分支管理，-b 创建并切换，-d 删除</em></p>\n</li>\n<li><p><code>git checkout &lt;branch&gt;</code></p>\n<p> <em>切换分支</em></p>\n</li>\n<li><p><code>git reset --hard &lt;历史节点&gt;</code></p>\n<p> <em>重置当前所有分区状态到某个历史节点</em></p>\n</li>\n<li><p><code>git log</code></p>\n<p> <em>查看提交记录</em></p>\n</li>\n<li><p><code>git push/pull</code></p>\n<p> <em>推送和拉取分支</em></p>\n</li>\n<li><p><code>git rm --cached files</code></p>\n<p> <em>删除文件跟踪但不删创造文件系统中的文件,rm -f删除目录</em></p>\n</li>\n<li><p><code>git branch -a</code></p>\n<p><em>从远程clone了repo后，只会在本地默认创建一个master分支，此时-a查看所有分支</em></p>\n</li>\n<li><p><code>git checkout -b &lt;本地分支名&gt; origin/&lt;远程分支名&gt;</code></p>\n<p><em>创建本地分支并将其与远程分支关联</em></p>\n</li>\n<li><p><code>git push origin :&lt;删除的分支名&gt;</code></p>\n<p><em>删除远程分支。利用git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。</em></p>\n</li>\n<li><p><code>git rest --hard/soft/mixed(default)</code></p>\n<p><img src=\"/images/gitreset.png\" alt=\"git rest图解\"></p>\n<p><em>回到上次提交(可以指定具体哪个提交)，三种模式:hard，直接替换本地工作区和暂存区，不保留本地的已编辑内容；soft,保留本地的修改，同时将指定节点之后的那些即将被舍弃的提交恢复到暂存区，因此你只要commit就会回到最后的节点；mixed，和soft相似，但是是将暂存区的内容和即将被舍弃的提交都保存到暂存区。</em><br><em>当commit了一些没用的代码，不想要了，重新开始就用hard,当你两次提交-m都是一样的内容，想合并，用soft;当add了一些代码进暂存区了，想撤销一些add,用mixed，全部回到工作区，再选择需要的进行add</em></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在工作学习中经常要进行<code>git</code>操作，这里持续记录我常用到的各种命令以及在遇到的各种坑。</p>\n</blockquote>","more":"<p>先放一张图便于后续讲述：<br><img src=\"/images/201906010.jpeg\" alt=\"工作区/暂存区/仓库(Head)\"><br>最最常用的：</p>\n<ol>\n<li><p><code>git clone &lt;remote_url&gt; [foldname]</code></p>\n<p> <em>克隆远程仓库到本地，可设置本地文件夹名称</em></p>\n</li>\n<li><p><code>git add [filename/.]</code></p>\n<p> <em>将修改的文件添加到暂存区</em></p>\n</li>\n<li><p><code>git commit -m &quot;说明&quot;</code></p>\n<p> <em>将暂存区文件添加到分支</em></p>\n</li>\n<li><p><code>git branch</code></p>\n<p> <em>分支管理，-b 创建并切换，-d 删除</em></p>\n</li>\n<li><p><code>git checkout &lt;branch&gt;</code></p>\n<p> <em>切换分支</em></p>\n</li>\n<li><p><code>git reset --hard &lt;历史节点&gt;</code></p>\n<p> <em>重置当前所有分区状态到某个历史节点</em></p>\n</li>\n<li><p><code>git log</code></p>\n<p> <em>查看提交记录</em></p>\n</li>\n<li><p><code>git push/pull</code></p>\n<p> <em>推送和拉取分支</em></p>\n</li>\n<li><p><code>git rm --cached files</code></p>\n<p> <em>删除文件跟踪但不删创造文件系统中的文件,rm -f删除目录</em></p>\n</li>\n<li><p><code>git branch -a</code></p>\n<p><em>从远程clone了repo后，只会在本地默认创建一个master分支，此时-a查看所有分支</em></p>\n</li>\n<li><p><code>git checkout -b &lt;本地分支名&gt; origin/&lt;远程分支名&gt;</code></p>\n<p><em>创建本地分支并将其与远程分支关联</em></p>\n</li>\n<li><p><code>git push origin :&lt;删除的分支名&gt;</code></p>\n<p><em>删除远程分支。利用git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。</em></p>\n</li>\n<li><p><code>git rest --hard/soft/mixed(default)</code></p>\n<p><img src=\"/images/gitreset.png\" alt=\"git rest图解\"></p>\n<p><em>回到上次提交(可以指定具体哪个提交)，三种模式:hard，直接替换本地工作区和暂存区，不保留本地的已编辑内容；soft,保留本地的修改，同时将指定节点之后的那些即将被舍弃的提交恢复到暂存区，因此你只要commit就会回到最后的节点；mixed，和soft相似，但是是将暂存区的内容和即将被舍弃的提交都保存到暂存区。</em><br><em>当commit了一些没用的代码，不想要了，重新开始就用hard,当你两次提交-m都是一样的内容，想合并，用soft;当add了一些代码进暂存区了，想撤销一些add,用mixed，全部回到工作区，再选择需要的进行add</em></p>\n</li>\n</ol>"},{"title":"json字符串与对象转换","date":"2019-06-01T11:11:52.000Z","_content":"\n> json在实际web项目经常用到，而且常需要和DTO、VO进行转换,这里记录我这些天用到的。\n\n<!--more-->\n\n## 1. **org.json**\n利用`org.json`的`jsonArray`和`JSONObject`，可以很容易对`json`字符串进行解析，但是不能转类对象。\n### 1.1 maven依赖\n```xml\n<dependencies>\n<dependency>\n<groupId>org.json</groupId>\n<artifactId>json</artifactId>\n<version>20160212</version>\n</dependency>\n</dependencies>\n```\n### 1.2 使用样例\n```java\nString jsonStr = \"{\\\"id\\\":1,\\\"name\\\":\\\"JAVA\\\",\\\"stus\\\":[{\\\"id\\\":101,\\\"name\\\":\\\"小明\\\",\\\"age\\\":16}]}\";\nJSONObject json = new JSONObject(jsonStr);\nJSONArray arr = json.getJSONArray(\"stus\");\n```\n## 2. **net.sf.json**\n可以转类对象，但已多年未维护，并且当操作较大json数据时存在内存和cpu消耗严重问题。\n### 2.1 maven依赖\n```java\n<dependency>\n<groupId>net.sf.json-lib</groupId>\n<artifactId>json-lib</artifactId>\n<version>2.4</version>\n<classifier>jdk15</classifier>//jar包区分jdk1.3和jdk1.5版本\n</dependency>\n```\n### 2.2 使用样例\n```java\nString jsonStr = \"{\\\"id\\\":1,\\\"name\\\":\\\"JAVA\\\",\\\"stus\\\":[{\\\"id\\\":101,\\\"name\\\":\\\"小明\\\",\\\"age\\\":16}]}\";\nJSONObject json = JSONObject.fromObject(jsonStr);\nString str = jsonStr.toString();\n```\nnet.sf.json可以将json对象转换为一个类对象，不过对象的属性必须是基本数据类型。\n\n`student.java`\n```java\npublic class Student{\nprivate int id;\nprivate String name;\nprivate int age;\n····\n/getter and setter/\n····\n}\n```\n```java\nString jsonStr = \"{\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18}\";\nJSONObject json = JSONObject.fromObject(jsonStr);\nstudent stu = (student) JSONObject.toBean(json,Student.class);\n```\n\n## 3. **fastjson**\n同样可以进行类对象的转换，阿里巴巴开源框架，效率高\n### 3.1 maven依赖\n```xml\n<dependency>\n<groupId>com.alibaba</groupId>\n<artifactId>fastjson</artifactId>\n<version>1.2.37</version>\n</dependency>\n```\n### 3.2 使用样例\n```java\nString jsonStr = \"{\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18}\";\nStudent stu = JSON.parseObject(jsonStr,Student.class);\nJSONObject js = JSON.parseObject(jsonStr);\nString str=JSON.toJSONString(stu);\n```\n## 4. **Jackson**\nJackson是著名的处理JSON和XML格式化的类库。Jackson类库包含了很多注解，可以快速建立java类与JSON之间的关系。\n\n例如：`@JsonIgnoreProperties、@JsonIgnore`注解用于排除某个属性; `@JsonSerialize`反序列化是将null值转为空字符串，序列化时删掉为null的属性。\n### 4.1 maven依赖\n\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-core</artifactId>\n    <version>2.9.8</version>\n</dependency>\n```\n\n### 4.2 使用样例\n\n```java\nString jsonStr = \"{\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18}\";\nObjectMapper mapper = new ObjectMapper();\n// Stirng to JSONObject\nJsonNode rootNode = mapper.readTree(jsonString);\nString name = root.get(\"name\").asText();\nJsonNode nameNode = rootNode.path(\"name\");\nString name = nameNode.getTextValue();\n\n//Object to JSON Conversion\nStudent student = mapper.readValue(jsonStr, Student.class);\n//Object to JSON Conversion\t\t\nString jsonString = mapper.writeValueAsString(student);\n```\n\n","source":"_posts/2019-06-01-json字符串与json对象转换.md","raw":"---\ntitle: json字符串与对象转换\ndate: 2019-06-01 19:11:52\ntags:\n- Json\n- 字符串\ncategories:\n- Java\n---\n\n> json在实际web项目经常用到，而且常需要和DTO、VO进行转换,这里记录我这些天用到的。\n\n<!--more-->\n\n## 1. **org.json**\n利用`org.json`的`jsonArray`和`JSONObject`，可以很容易对`json`字符串进行解析，但是不能转类对象。\n### 1.1 maven依赖\n```xml\n<dependencies>\n<dependency>\n<groupId>org.json</groupId>\n<artifactId>json</artifactId>\n<version>20160212</version>\n</dependency>\n</dependencies>\n```\n### 1.2 使用样例\n```java\nString jsonStr = \"{\\\"id\\\":1,\\\"name\\\":\\\"JAVA\\\",\\\"stus\\\":[{\\\"id\\\":101,\\\"name\\\":\\\"小明\\\",\\\"age\\\":16}]}\";\nJSONObject json = new JSONObject(jsonStr);\nJSONArray arr = json.getJSONArray(\"stus\");\n```\n## 2. **net.sf.json**\n可以转类对象，但已多年未维护，并且当操作较大json数据时存在内存和cpu消耗严重问题。\n### 2.1 maven依赖\n```java\n<dependency>\n<groupId>net.sf.json-lib</groupId>\n<artifactId>json-lib</artifactId>\n<version>2.4</version>\n<classifier>jdk15</classifier>//jar包区分jdk1.3和jdk1.5版本\n</dependency>\n```\n### 2.2 使用样例\n```java\nString jsonStr = \"{\\\"id\\\":1,\\\"name\\\":\\\"JAVA\\\",\\\"stus\\\":[{\\\"id\\\":101,\\\"name\\\":\\\"小明\\\",\\\"age\\\":16}]}\";\nJSONObject json = JSONObject.fromObject(jsonStr);\nString str = jsonStr.toString();\n```\nnet.sf.json可以将json对象转换为一个类对象，不过对象的属性必须是基本数据类型。\n\n`student.java`\n```java\npublic class Student{\nprivate int id;\nprivate String name;\nprivate int age;\n····\n/getter and setter/\n····\n}\n```\n```java\nString jsonStr = \"{\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18}\";\nJSONObject json = JSONObject.fromObject(jsonStr);\nstudent stu = (student) JSONObject.toBean(json,Student.class);\n```\n\n## 3. **fastjson**\n同样可以进行类对象的转换，阿里巴巴开源框架，效率高\n### 3.1 maven依赖\n```xml\n<dependency>\n<groupId>com.alibaba</groupId>\n<artifactId>fastjson</artifactId>\n<version>1.2.37</version>\n</dependency>\n```\n### 3.2 使用样例\n```java\nString jsonStr = \"{\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18}\";\nStudent stu = JSON.parseObject(jsonStr,Student.class);\nJSONObject js = JSON.parseObject(jsonStr);\nString str=JSON.toJSONString(stu);\n```\n## 4. **Jackson**\nJackson是著名的处理JSON和XML格式化的类库。Jackson类库包含了很多注解，可以快速建立java类与JSON之间的关系。\n\n例如：`@JsonIgnoreProperties、@JsonIgnore`注解用于排除某个属性; `@JsonSerialize`反序列化是将null值转为空字符串，序列化时删掉为null的属性。\n### 4.1 maven依赖\n\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-core</artifactId>\n    <version>2.9.8</version>\n</dependency>\n```\n\n### 4.2 使用样例\n\n```java\nString jsonStr = \"{\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18}\";\nObjectMapper mapper = new ObjectMapper();\n// Stirng to JSONObject\nJsonNode rootNode = mapper.readTree(jsonString);\nString name = root.get(\"name\").asText();\nJsonNode nameNode = rootNode.path(\"name\");\nString name = nameNode.getTextValue();\n\n//Object to JSON Conversion\nStudent student = mapper.readValue(jsonStr, Student.class);\n//Object to JSON Conversion\t\t\nString jsonString = mapper.writeValueAsString(student);\n```\n\n","slug":"json字符串与json对象转换","published":1,"updated":"2019-07-13T11:23:33.799Z","_id":"cjy1bba6s0006okujrodey1k0","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>json在实际web项目经常用到，而且常需要和DTO、VO进行转换,这里记录我这些天用到的。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"1-org-json\"><a href=\"#1-org-json\" class=\"headerlink\" title=\"1. org.json\"></a>1. <strong>org.json</strong></h2><p>利用<code>org.json</code>的<code>jsonArray</code>和<code>JSONObject</code>，可以很容易对<code>json</code>字符串进行解析，但是不能转类对象。</p>\n<h3 id=\"1-1-maven依赖\"><a href=\"#1-1-maven依赖\" class=\"headerlink\" title=\"1.1 maven依赖\"></a>1.1 maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.json<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>json<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>20160212<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-使用样例\"><a href=\"#1-2-使用样例\" class=\"headerlink\" title=\"1.2 使用样例\"></a>1.2 使用样例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonStr = <span class=\"string\">\"&#123;\\\"id\\\":1,\\\"name\\\":\\\"JAVA\\\",\\\"stus\\\":[&#123;\\\"id\\\":101,\\\"name\\\":\\\"小明\\\",\\\"age\\\":16&#125;]&#125;\"</span>;</span><br><span class=\"line\">JSONObject json = <span class=\"keyword\">new</span> JSONObject(jsonStr);</span><br><span class=\"line\">JSONArray arr = json.getJSONArray(<span class=\"string\">\"stus\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-net-sf-json\"><a href=\"#2-net-sf-json\" class=\"headerlink\" title=\"2. net.sf.json\"></a>2. <strong>net.sf.json</strong></h2><p>可以转类对象，但已多年未维护，并且当操作较大json数据时存在内存和cpu消耗严重问题。</p>\n<h3 id=\"2-1-maven依赖\"><a href=\"#2-1-maven依赖\" class=\"headerlink\" title=\"2.1 maven依赖\"></a>2.1 maven依赖</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;json-lib&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;2.4&lt;/version&gt;</span><br><span class=\"line\">&lt;classifier&gt;jdk15&lt;/classifier&gt;//jar包区分jdk1.3和jdk1.5版本</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-使用样例\"><a href=\"#2-2-使用样例\" class=\"headerlink\" title=\"2.2 使用样例\"></a>2.2 使用样例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonStr = <span class=\"string\">\"&#123;\\\"id\\\":1,\\\"name\\\":\\\"JAVA\\\",\\\"stus\\\":[&#123;\\\"id\\\":101,\\\"name\\\":\\\"小明\\\",\\\"age\\\":16&#125;]&#125;\"</span>;</span><br><span class=\"line\">JSONObject json = JSONObject.fromObject(jsonStr);</span><br><span class=\"line\">String str = jsonStr.toString();</span><br></pre></td></tr></table></figure>\n\n<p>net.sf.json可以将json对象转换为一个类对象，不过对象的属性必须是基本数据类型。</p>\n<p><code>student.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">····</span><br><span class=\"line\">/getter and setter/</span><br><span class=\"line\">····</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonStr = <span class=\"string\">\"&#123;\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18&#125;\"</span>;</span><br><span class=\"line\">JSONObject json = JSONObject.fromObject(jsonStr);</span><br><span class=\"line\">student stu = (student) JSONObject.toBean(json,Student.class);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-fastjson\"><a href=\"#3-fastjson\" class=\"headerlink\" title=\"3. fastjson\"></a>3. <strong>fastjson</strong></h2><p>同样可以进行类对象的转换，阿里巴巴开源框架，效率高</p>\n<h3 id=\"3-1-maven依赖\"><a href=\"#3-1-maven依赖\" class=\"headerlink\" title=\"3.1 maven依赖\"></a>3.1 maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.37<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-使用样例\"><a href=\"#3-2-使用样例\" class=\"headerlink\" title=\"3.2 使用样例\"></a>3.2 使用样例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonStr = <span class=\"string\">\"&#123;\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18&#125;\"</span>;</span><br><span class=\"line\">Student stu = JSON.parseObject(jsonStr,Student.class);</span><br><span class=\"line\">JSONObject js = JSON.parseObject(jsonStr);</span><br><span class=\"line\">String str=JSON.toJSONString(stu);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Jackson\"><a href=\"#4-Jackson\" class=\"headerlink\" title=\"4. Jackson\"></a>4. <strong>Jackson</strong></h2><p>Jackson是著名的处理JSON和XML格式化的类库。Jackson类库包含了很多注解，可以快速建立java类与JSON之间的关系。</p>\n<p>例如：<code>@JsonIgnoreProperties、@JsonIgnore</code>注解用于排除某个属性; <code>@JsonSerialize</code>反序列化是将null值转为空字符串，序列化时删掉为null的属性。</p>\n<h3 id=\"4-1-maven依赖\"><a href=\"#4-1-maven依赖\" class=\"headerlink\" title=\"4.1 maven依赖\"></a>4.1 maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-使用样例\"><a href=\"#4-2-使用样例\" class=\"headerlink\" title=\"4.2 使用样例\"></a>4.2 使用样例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonStr = <span class=\"string\">\"&#123;\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18&#125;\"</span>;</span><br><span class=\"line\">ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\"><span class=\"comment\">// Stirng to JSONObject</span></span><br><span class=\"line\">JsonNode rootNode = mapper.readTree(jsonString);</span><br><span class=\"line\">String name = root.get(<span class=\"string\">\"name\"</span>).asText();</span><br><span class=\"line\">JsonNode nameNode = rootNode.path(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">String name = nameNode.getTextValue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Object to JSON Conversion</span></span><br><span class=\"line\">Student student = mapper.readValue(jsonStr, Student.class);</span><br><span class=\"line\"><span class=\"comment\">//Object to JSON Conversion\t\t</span></span><br><span class=\"line\">String jsonString = mapper.writeValueAsString(student);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>json在实际web项目经常用到，而且常需要和DTO、VO进行转换,这里记录我这些天用到的。</p>\n</blockquote>","more":"<h2 id=\"1-org-json\"><a href=\"#1-org-json\" class=\"headerlink\" title=\"1. org.json\"></a>1. <strong>org.json</strong></h2><p>利用<code>org.json</code>的<code>jsonArray</code>和<code>JSONObject</code>，可以很容易对<code>json</code>字符串进行解析，但是不能转类对象。</p>\n<h3 id=\"1-1-maven依赖\"><a href=\"#1-1-maven依赖\" class=\"headerlink\" title=\"1.1 maven依赖\"></a>1.1 maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.json<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>json<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>20160212<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-使用样例\"><a href=\"#1-2-使用样例\" class=\"headerlink\" title=\"1.2 使用样例\"></a>1.2 使用样例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonStr = <span class=\"string\">\"&#123;\\\"id\\\":1,\\\"name\\\":\\\"JAVA\\\",\\\"stus\\\":[&#123;\\\"id\\\":101,\\\"name\\\":\\\"小明\\\",\\\"age\\\":16&#125;]&#125;\"</span>;</span><br><span class=\"line\">JSONObject json = <span class=\"keyword\">new</span> JSONObject(jsonStr);</span><br><span class=\"line\">JSONArray arr = json.getJSONArray(<span class=\"string\">\"stus\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-net-sf-json\"><a href=\"#2-net-sf-json\" class=\"headerlink\" title=\"2. net.sf.json\"></a>2. <strong>net.sf.json</strong></h2><p>可以转类对象，但已多年未维护，并且当操作较大json数据时存在内存和cpu消耗严重问题。</p>\n<h3 id=\"2-1-maven依赖\"><a href=\"#2-1-maven依赖\" class=\"headerlink\" title=\"2.1 maven依赖\"></a>2.1 maven依赖</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;json-lib&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;2.4&lt;/version&gt;</span><br><span class=\"line\">&lt;classifier&gt;jdk15&lt;/classifier&gt;//jar包区分jdk1.3和jdk1.5版本</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-使用样例\"><a href=\"#2-2-使用样例\" class=\"headerlink\" title=\"2.2 使用样例\"></a>2.2 使用样例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonStr = <span class=\"string\">\"&#123;\\\"id\\\":1,\\\"name\\\":\\\"JAVA\\\",\\\"stus\\\":[&#123;\\\"id\\\":101,\\\"name\\\":\\\"小明\\\",\\\"age\\\":16&#125;]&#125;\"</span>;</span><br><span class=\"line\">JSONObject json = JSONObject.fromObject(jsonStr);</span><br><span class=\"line\">String str = jsonStr.toString();</span><br></pre></td></tr></table></figure>\n\n<p>net.sf.json可以将json对象转换为一个类对象，不过对象的属性必须是基本数据类型。</p>\n<p><code>student.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">····</span><br><span class=\"line\">/getter and setter/</span><br><span class=\"line\">····</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonStr = <span class=\"string\">\"&#123;\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18&#125;\"</span>;</span><br><span class=\"line\">JSONObject json = JSONObject.fromObject(jsonStr);</span><br><span class=\"line\">student stu = (student) JSONObject.toBean(json,Student.class);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-fastjson\"><a href=\"#3-fastjson\" class=\"headerlink\" title=\"3. fastjson\"></a>3. <strong>fastjson</strong></h2><p>同样可以进行类对象的转换，阿里巴巴开源框架，效率高</p>\n<h3 id=\"3-1-maven依赖\"><a href=\"#3-1-maven依赖\" class=\"headerlink\" title=\"3.1 maven依赖\"></a>3.1 maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.37<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-使用样例\"><a href=\"#3-2-使用样例\" class=\"headerlink\" title=\"3.2 使用样例\"></a>3.2 使用样例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonStr = <span class=\"string\">\"&#123;\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18&#125;\"</span>;</span><br><span class=\"line\">Student stu = JSON.parseObject(jsonStr,Student.class);</span><br><span class=\"line\">JSONObject js = JSON.parseObject(jsonStr);</span><br><span class=\"line\">String str=JSON.toJSONString(stu);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Jackson\"><a href=\"#4-Jackson\" class=\"headerlink\" title=\"4. Jackson\"></a>4. <strong>Jackson</strong></h2><p>Jackson是著名的处理JSON和XML格式化的类库。Jackson类库包含了很多注解，可以快速建立java类与JSON之间的关系。</p>\n<p>例如：<code>@JsonIgnoreProperties、@JsonIgnore</code>注解用于排除某个属性; <code>@JsonSerialize</code>反序列化是将null值转为空字符串，序列化时删掉为null的属性。</p>\n<h3 id=\"4-1-maven依赖\"><a href=\"#4-1-maven依赖\" class=\"headerlink\" title=\"4.1 maven依赖\"></a>4.1 maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-使用样例\"><a href=\"#4-2-使用样例\" class=\"headerlink\" title=\"4.2 使用样例\"></a>4.2 使用样例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String jsonStr = <span class=\"string\">\"&#123;\\\"id\\\":1,\\\"name\\\":\\\"小明\\\",\\\"age\\\":18&#125;\"</span>;</span><br><span class=\"line\">ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\"><span class=\"comment\">// Stirng to JSONObject</span></span><br><span class=\"line\">JsonNode rootNode = mapper.readTree(jsonString);</span><br><span class=\"line\">String name = root.get(<span class=\"string\">\"name\"</span>).asText();</span><br><span class=\"line\">JsonNode nameNode = rootNode.path(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">String name = nameNode.getTextValue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Object to JSON Conversion</span></span><br><span class=\"line\">Student student = mapper.readValue(jsonStr, Student.class);</span><br><span class=\"line\"><span class=\"comment\">//Object to JSON Conversion\t\t</span></span><br><span class=\"line\">String jsonString = mapper.writeValueAsString(student);</span><br></pre></td></tr></table></figure>"},{"title":"139. 单词拆分","date":"2019-07-13T08:41:25.000Z","_content":"\n# Question\n\n给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。\n\n<!--more-->\n\n**说明：**\n\n* 拆分时可以重复使用字典中的单词。\n* 你可以假设字典中没有重复的单词。\n\n**示例 1：**\n```\n输入: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n输出: true\n解释: 返回 true 因为 \"leetcode\" 可以被拆分成 \"leet code\"。\n```\n\n**示例 2：**\n```\n输入: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\n输出: true\n解释: 返回 true 因为 \"applepenapple\" 可以被拆分成 \"apple pen apple\"。\n     注意你可以重复使用字典中的单词。\n```\n\n**示例 3：**\n```\n输入: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n输出: false\n```\n\n# Solution\n\n1.递归回溯\n\n若一个单词可以分解，则必有一个单词是`s`的前缀，将`s`分成两部分，若前一部分是一个单词，则判断后一部分是否可以分解，若后一部分也可以分解，则整个`s`都可以分解，这后一部分`s`和整个`s`的问题相似，所以利用递归求解子问题，将子问题结果用于这一层的求解。\n\npython\t\n```\nclass Solution:\n    def wb(self, s, myset, mem):\n        if s in mem:\n            return mem[s]\n        length = len(s)\n        if length == 0:\n            return True\n        for i in range(1,length+1):\n            if s[:i] in myset and self.wb(s[i:],myset,mem):\n                mem[s] = True\n                return True\n        mem[s] = False\n        return False\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        mem = dict()\n        myset = set(wordDict)\n        return self.wb(s, myset, mem)\n```\n2.动态规划\n\n假设当前要求`s[:i]`的结果，且`s[:i-1]`的结果已知。利用之前已经求出的解来解决当前问题，后面的问题也同样依赖当前的解作为已求解，这样的求解方式就是动态规划。\n\n本题方法：设置dp数组，`dp[i]`表示字符串`s[:i]`是否是可分解的。`dp[i]`求解：将`s[:i]`以j分解成两部分`s[:j]`和`s[j:i]`,若`dp[j]==True`，且`s[j:i]`是一个单词，则`dp[i]=True`。由于是判断后一部分是否为单词，所以将`j`从`i`开始递减判断,以此减少一些判断。\n\npython\n```\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        myset = set(wordDict)\n        dp = [False for i in range(len(s)+1)]\n        dp[0] = True\n        for i in range(1,len(s)+1):\n            for j in range(i+1)[::-1]:\n                if dp[j] and s[j:i] in myset:\n                    dp[i] = True\n                    break\n        return dp[len(s)]\n```","source":"_posts/2019-07-13-139-单词拆分.md","raw":"---\ntitle: 139. 单词拆分\ndate: 2019-07-13 16:41:25\ntags:\n- 题解\n- Medium\n- 动态规划\n- 递归\ncategories:\n- LeetCode\n---\n\n# Question\n\n给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。\n\n<!--more-->\n\n**说明：**\n\n* 拆分时可以重复使用字典中的单词。\n* 你可以假设字典中没有重复的单词。\n\n**示例 1：**\n```\n输入: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n输出: true\n解释: 返回 true 因为 \"leetcode\" 可以被拆分成 \"leet code\"。\n```\n\n**示例 2：**\n```\n输入: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\n输出: true\n解释: 返回 true 因为 \"applepenapple\" 可以被拆分成 \"apple pen apple\"。\n     注意你可以重复使用字典中的单词。\n```\n\n**示例 3：**\n```\n输入: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n输出: false\n```\n\n# Solution\n\n1.递归回溯\n\n若一个单词可以分解，则必有一个单词是`s`的前缀，将`s`分成两部分，若前一部分是一个单词，则判断后一部分是否可以分解，若后一部分也可以分解，则整个`s`都可以分解，这后一部分`s`和整个`s`的问题相似，所以利用递归求解子问题，将子问题结果用于这一层的求解。\n\npython\t\n```\nclass Solution:\n    def wb(self, s, myset, mem):\n        if s in mem:\n            return mem[s]\n        length = len(s)\n        if length == 0:\n            return True\n        for i in range(1,length+1):\n            if s[:i] in myset and self.wb(s[i:],myset,mem):\n                mem[s] = True\n                return True\n        mem[s] = False\n        return False\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        mem = dict()\n        myset = set(wordDict)\n        return self.wb(s, myset, mem)\n```\n2.动态规划\n\n假设当前要求`s[:i]`的结果，且`s[:i-1]`的结果已知。利用之前已经求出的解来解决当前问题，后面的问题也同样依赖当前的解作为已求解，这样的求解方式就是动态规划。\n\n本题方法：设置dp数组，`dp[i]`表示字符串`s[:i]`是否是可分解的。`dp[i]`求解：将`s[:i]`以j分解成两部分`s[:j]`和`s[j:i]`,若`dp[j]==True`，且`s[j:i]`是一个单词，则`dp[i]=True`。由于是判断后一部分是否为单词，所以将`j`从`i`开始递减判断,以此减少一些判断。\n\npython\n```\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        myset = set(wordDict)\n        dp = [False for i in range(len(s)+1)]\n        dp[0] = True\n        for i in range(1,len(s)+1):\n            for j in range(i+1)[::-1]:\n                if dp[j] and s[j:i] in myset:\n                    dp[i] = True\n                    break\n        return dp[len(s)]\n```","slug":"139-单词拆分","published":1,"updated":"2019-07-13T09:15:33.565Z","_id":"cjy1bba6t0007okuj1fbdalmg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p>\n<a id=\"more\"></a>\n\n<p><strong>说明：</strong></p>\n<ul>\n<li>拆分时可以重复使用字典中的单词。</li>\n<li>你可以假设字典中没有重复的单词。</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]</span><br><span class=\"line\">输出: true</span><br><span class=\"line\">解释: 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class=\"line\">输出: true</span><br><span class=\"line\">解释: 返回 true 因为 &quot;applepenapple&quot; 可以被拆分成 &quot;apple pen apple&quot;。</span><br><span class=\"line\">     注意你可以重复使用字典中的单词。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>1.递归回溯</p>\n<p>若一个单词可以分解，则必有一个单词是<code>s</code>的前缀，将<code>s</code>分成两部分，若前一部分是一个单词，则判断后一部分是否可以分解，若后一部分也可以分解，则整个<code>s</code>都可以分解，这后一部分<code>s</code>和整个<code>s</code>的问题相似，所以利用递归求解子问题，将子问题结果用于这一层的求解。</p>\n<p>python    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution:</span><br><span class=\"line\">    def wb(self, s, myset, mem):</span><br><span class=\"line\">        if s in mem:</span><br><span class=\"line\">            return mem[s]</span><br><span class=\"line\">        length = len(s)</span><br><span class=\"line\">        if length == 0:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        for i in range(1,length+1):</span><br><span class=\"line\">            if s[:i] in myset and self.wb(s[i:],myset,mem):</span><br><span class=\"line\">                mem[s] = True</span><br><span class=\"line\">                return True</span><br><span class=\"line\">        mem[s] = False</span><br><span class=\"line\">        return False</span><br><span class=\"line\">    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:</span><br><span class=\"line\">        mem = dict()</span><br><span class=\"line\">        myset = set(wordDict)</span><br><span class=\"line\">        return self.wb(s, myset, mem)</span><br></pre></td></tr></table></figure>\n\n<p>2.动态规划</p>\n<p>假设当前要求<code>s[:i]</code>的结果，且<code>s[:i-1]</code>的结果已知。利用之前已经求出的解来解决当前问题，后面的问题也同样依赖当前的解作为已求解，这样的求解方式就是动态规划。</p>\n<p>本题方法：设置dp数组，<code>dp[i]</code>表示字符串<code>s[:i]</code>是否是可分解的。<code>dp[i]</code>求解：将<code>s[:i]</code>以j分解成两部分<code>s[:j]</code>和<code>s[j:i]</code>,若<code>dp[j]==True</code>，且<code>s[j:i]</code>是一个单词，则<code>dp[i]=True</code>。由于是判断后一部分是否为单词，所以将<code>j</code>从<code>i</code>开始递减判断,以此减少一些判断。</p>\n<p>python</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution:</span><br><span class=\"line\">    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:</span><br><span class=\"line\">        myset = set(wordDict)</span><br><span class=\"line\">        dp = [False for i in range(len(s)+1)]</span><br><span class=\"line\">        dp[0] = True</span><br><span class=\"line\">        for i in range(1,len(s)+1):</span><br><span class=\"line\">            for j in range(i+1)[::-1]:</span><br><span class=\"line\">                if dp[j] and s[j:i] in myset:</span><br><span class=\"line\">                    dp[i] = True</span><br><span class=\"line\">                    break</span><br><span class=\"line\">        return dp[len(s)]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p>","more":"<p><strong>说明：</strong></p>\n<ul>\n<li>拆分时可以重复使用字典中的单词。</li>\n<li>你可以假设字典中没有重复的单词。</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]</span><br><span class=\"line\">输出: true</span><br><span class=\"line\">解释: 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class=\"line\">输出: true</span><br><span class=\"line\">解释: 返回 true 因为 &quot;applepenapple&quot; 可以被拆分成 &quot;apple pen apple&quot;。</span><br><span class=\"line\">     注意你可以重复使用字典中的单词。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>1.递归回溯</p>\n<p>若一个单词可以分解，则必有一个单词是<code>s</code>的前缀，将<code>s</code>分成两部分，若前一部分是一个单词，则判断后一部分是否可以分解，若后一部分也可以分解，则整个<code>s</code>都可以分解，这后一部分<code>s</code>和整个<code>s</code>的问题相似，所以利用递归求解子问题，将子问题结果用于这一层的求解。</p>\n<p>python    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution:</span><br><span class=\"line\">    def wb(self, s, myset, mem):</span><br><span class=\"line\">        if s in mem:</span><br><span class=\"line\">            return mem[s]</span><br><span class=\"line\">        length = len(s)</span><br><span class=\"line\">        if length == 0:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        for i in range(1,length+1):</span><br><span class=\"line\">            if s[:i] in myset and self.wb(s[i:],myset,mem):</span><br><span class=\"line\">                mem[s] = True</span><br><span class=\"line\">                return True</span><br><span class=\"line\">        mem[s] = False</span><br><span class=\"line\">        return False</span><br><span class=\"line\">    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:</span><br><span class=\"line\">        mem = dict()</span><br><span class=\"line\">        myset = set(wordDict)</span><br><span class=\"line\">        return self.wb(s, myset, mem)</span><br></pre></td></tr></table></figure>\n\n<p>2.动态规划</p>\n<p>假设当前要求<code>s[:i]</code>的结果，且<code>s[:i-1]</code>的结果已知。利用之前已经求出的解来解决当前问题，后面的问题也同样依赖当前的解作为已求解，这样的求解方式就是动态规划。</p>\n<p>本题方法：设置dp数组，<code>dp[i]</code>表示字符串<code>s[:i]</code>是否是可分解的。<code>dp[i]</code>求解：将<code>s[:i]</code>以j分解成两部分<code>s[:j]</code>和<code>s[j:i]</code>,若<code>dp[j]==True</code>，且<code>s[j:i]</code>是一个单词，则<code>dp[i]=True</code>。由于是判断后一部分是否为单词，所以将<code>j</code>从<code>i</code>开始递减判断,以此减少一些判断。</p>\n<p>python</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution:</span><br><span class=\"line\">    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:</span><br><span class=\"line\">        myset = set(wordDict)</span><br><span class=\"line\">        dp = [False for i in range(len(s)+1)]</span><br><span class=\"line\">        dp[0] = True</span><br><span class=\"line\">        for i in range(1,len(s)+1):</span><br><span class=\"line\">            for j in range(i+1)[::-1]:</span><br><span class=\"line\">                if dp[j] and s[j:i] in myset:</span><br><span class=\"line\">                    dp[i] = True</span><br><span class=\"line\">                    break</span><br><span class=\"line\">        return dp[len(s)]</span><br></pre></td></tr></table></figure>"},{"title":"LeetCode 1104.Path In Zigzag Labelled Binary Tree","date":"2019-07-06T11:58:01.000Z","_content":"\n# Question\n\nIn an infinite binary tree where every node has two children, the nodes are labelled in row order.In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.\n\n<!--more-->\n\n![tree.png](/images/tree.png)\n\nGiven the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.\n\nExample 1:\n```\nInput: label = 14\nOutput: [1,3,4,14]\n```\n\nExample 2:\n```\nInput: label = 26\nOutput: [1,2,6,10,26]\n```\nConstraints:\n```\n1 <= label <= 10^6\n```\n\n# Solution\n首先根据`label`计算所在行数，根据行数奇偶可以判断这一行的数是否逆序。逆序则计算正序时对应的值，然后`//2`得到上一层正序时的值，再判断上一层层数的奇偶性，若上一层是偶数层，则将数字转换为逆序时的值。重复此过程直到根节点。\n\nPython:\n```python\nimport math\nclass Solution:\n    def findOriginIndex(self, label):\n        row = math.floor(math.log(label, 2) + 1)\n        rowMin = pow(2, row - 1) \n        rowMax = pow(2, row) - 1\n        sm = rowMin + rowMax\n        return sm - label\n    def pathInZigZagTree(self, label: int):\n        if label == 1:\n            return [1]\n        ret = []\n        ret.append(label)\n        while label != 1:\n            row = math.floor(math.log(label, 2) + 1)\n            if row & 1 == 0:\n                label = self.findOriginIndex(label)\n                label >>= 1\n                ret.append(label)\n                continue\n            label >>= 1\n            label = self.findOriginIndex(label)\n            ret.append(label)\n        ret.reverse()\n        return ret\n```\n\nJava:\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public int originIndex(int label){\n        int row = (int) Math.floor(Math.log(label) / Math.log(2) + 1);\n        int rowMin = (int) Math.pow(2, row - 1);\n        int rowMax = (int) (Math.pow(2,row) - 1);\n        int sm = rowMin + rowMax;\n        int ret = sm - label;\n        return ret;\n    }\n    public List<Integer> pathInZigZagTree(int label) {\n        List<Integer> ret = new ArrayList<Integer>();\n        ret.add(label);\n        if (1 == label) {\n        \treturn ret;\n        }\n        while (label != 1) {\n        \tint row = (int) Math.floor(Math.log(label) / Math.log(2) + 1);\n        \tif ((row & 1) == 0) {\n        \t\tlabel = this.originIndex(label);\n        \t\tlabel = label >> 1;\n        \t\tret.add(0, label);\n        \t\tcontinue;\n        \t}\n        \tlabel = label >> 1;\n        \tlabel = this.originIndex(label);\n        \tret.add(0,label);\n        }\n        return ret;\n    }\n}\n```","source":"_posts/2019-07-06-LeetCode-1104-Path-In-Zigzag-Labelled-Binary-Tree.md","raw":"---\ntitle: LeetCode 1104.Path In Zigzag Labelled Binary Tree\ndate: 2019-07-06 19:58:01\ntags:\n- 题解\n- Medium\ncategories:\n- LeetCode\n---\n\n# Question\n\nIn an infinite binary tree where every node has two children, the nodes are labelled in row order.In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.\n\n<!--more-->\n\n![tree.png](/images/tree.png)\n\nGiven the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.\n\nExample 1:\n```\nInput: label = 14\nOutput: [1,3,4,14]\n```\n\nExample 2:\n```\nInput: label = 26\nOutput: [1,2,6,10,26]\n```\nConstraints:\n```\n1 <= label <= 10^6\n```\n\n# Solution\n首先根据`label`计算所在行数，根据行数奇偶可以判断这一行的数是否逆序。逆序则计算正序时对应的值，然后`//2`得到上一层正序时的值，再判断上一层层数的奇偶性，若上一层是偶数层，则将数字转换为逆序时的值。重复此过程直到根节点。\n\nPython:\n```python\nimport math\nclass Solution:\n    def findOriginIndex(self, label):\n        row = math.floor(math.log(label, 2) + 1)\n        rowMin = pow(2, row - 1) \n        rowMax = pow(2, row) - 1\n        sm = rowMin + rowMax\n        return sm - label\n    def pathInZigZagTree(self, label: int):\n        if label == 1:\n            return [1]\n        ret = []\n        ret.append(label)\n        while label != 1:\n            row = math.floor(math.log(label, 2) + 1)\n            if row & 1 == 0:\n                label = self.findOriginIndex(label)\n                label >>= 1\n                ret.append(label)\n                continue\n            label >>= 1\n            label = self.findOriginIndex(label)\n            ret.append(label)\n        ret.reverse()\n        return ret\n```\n\nJava:\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public int originIndex(int label){\n        int row = (int) Math.floor(Math.log(label) / Math.log(2) + 1);\n        int rowMin = (int) Math.pow(2, row - 1);\n        int rowMax = (int) (Math.pow(2,row) - 1);\n        int sm = rowMin + rowMax;\n        int ret = sm - label;\n        return ret;\n    }\n    public List<Integer> pathInZigZagTree(int label) {\n        List<Integer> ret = new ArrayList<Integer>();\n        ret.add(label);\n        if (1 == label) {\n        \treturn ret;\n        }\n        while (label != 1) {\n        \tint row = (int) Math.floor(Math.log(label) / Math.log(2) + 1);\n        \tif ((row & 1) == 0) {\n        \t\tlabel = this.originIndex(label);\n        \t\tlabel = label >> 1;\n        \t\tret.add(0, label);\n        \t\tcontinue;\n        \t}\n        \tlabel = label >> 1;\n        \tlabel = this.originIndex(label);\n        \tret.add(0,label);\n        }\n        return ret;\n    }\n}\n```","slug":"LeetCode-1104-Path-In-Zigzag-Labelled-Binary-Tree","published":1,"updated":"2019-07-06T12:56:38.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy1bba6v0008okuj74e67uun","content":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>In an infinite binary tree where every node has two children, the nodes are labelled in row order.In the odd numbered rows (ie., the first, third, fifth,…), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,…), the labelling is right to left.</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/images/tree.png\" alt=\"tree.png\"></p>\n<p>Given the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.</p>\n<p>Example 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: label = 14</span><br><span class=\"line\">Output: [1,3,4,14]</span><br></pre></td></tr></table></figure>\n\n<p>Example 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: label = 26</span><br><span class=\"line\">Output: [1,2,6,10,26]</span><br></pre></td></tr></table></figure>\n\n<p>Constraints:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= label &lt;= 10^6</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>首先根据<code>label</code>计算所在行数，根据行数奇偶可以判断这一行的数是否逆序。逆序则计算正序时对应的值，然后<code>//2</code>得到上一层正序时的值，再判断上一层层数的奇偶性，若上一层是偶数层，则将数字转换为逆序时的值。重复此过程直到根节点。</p>\n<p>Python:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findOriginIndex</span><span class=\"params\">(self, label)</span>:</span></span><br><span class=\"line\">        row = math.floor(math.log(label, <span class=\"number\">2</span>) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        rowMin = pow(<span class=\"number\">2</span>, row - <span class=\"number\">1</span>) </span><br><span class=\"line\">        rowMax = pow(<span class=\"number\">2</span>, row) - <span class=\"number\">1</span></span><br><span class=\"line\">        sm = rowMin + rowMax</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sm - label</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pathInZigZagTree</span><span class=\"params\">(self, label: int)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> label == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"number\">1</span>]</span><br><span class=\"line\">        ret = []</span><br><span class=\"line\">        ret.append(label)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> label != <span class=\"number\">1</span>:</span><br><span class=\"line\">            row = math.floor(math.log(label, <span class=\"number\">2</span>) + <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> row &amp; <span class=\"number\">1</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                label = self.findOriginIndex(label)</span><br><span class=\"line\">                label &gt;&gt;= <span class=\"number\">1</span></span><br><span class=\"line\">                ret.append(label)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            label &gt;&gt;= <span class=\"number\">1</span></span><br><span class=\"line\">            label = self.findOriginIndex(label)</span><br><span class=\"line\">            ret.append(label)</span><br><span class=\"line\">        ret.reverse()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br></pre></td></tr></table></figure>\n\n<p>Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">originIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> label)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = (<span class=\"keyword\">int</span>) Math.floor(Math.log(label) / Math.log(<span class=\"number\">2</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowMin = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, row - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowMax = (<span class=\"keyword\">int</span>) (Math.pow(<span class=\"number\">2</span>,row) - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sm = rowMin + rowMax;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = sm - label;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">pathInZigZagTree</span><span class=\"params\">(<span class=\"keyword\">int</span> label)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        ret.add(label);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == label) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (label != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">int</span> row = (<span class=\"keyword\">int</span>) Math.floor(Math.log(label) / Math.log(<span class=\"number\">2</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> ((row &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \t\tlabel = <span class=\"keyword\">this</span>.originIndex(label);</span><br><span class=\"line\">        \t\tlabel = label &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        \t\tret.add(<span class=\"number\">0</span>, label);</span><br><span class=\"line\">        \t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \tlabel = label &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        \tlabel = <span class=\"keyword\">this</span>.originIndex(label);</span><br><span class=\"line\">        \tret.add(<span class=\"number\">0</span>,label);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>In an infinite binary tree where every node has two children, the nodes are labelled in row order.In the odd numbered rows (ie., the first, third, fifth,…), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,…), the labelling is right to left.</p>","more":"<p><img src=\"/images/tree.png\" alt=\"tree.png\"></p>\n<p>Given the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.</p>\n<p>Example 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: label = 14</span><br><span class=\"line\">Output: [1,3,4,14]</span><br></pre></td></tr></table></figure>\n\n<p>Example 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: label = 26</span><br><span class=\"line\">Output: [1,2,6,10,26]</span><br></pre></td></tr></table></figure>\n\n<p>Constraints:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= label &lt;= 10^6</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>首先根据<code>label</code>计算所在行数，根据行数奇偶可以判断这一行的数是否逆序。逆序则计算正序时对应的值，然后<code>//2</code>得到上一层正序时的值，再判断上一层层数的奇偶性，若上一层是偶数层，则将数字转换为逆序时的值。重复此过程直到根节点。</p>\n<p>Python:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findOriginIndex</span><span class=\"params\">(self, label)</span>:</span></span><br><span class=\"line\">        row = math.floor(math.log(label, <span class=\"number\">2</span>) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        rowMin = pow(<span class=\"number\">2</span>, row - <span class=\"number\">1</span>) </span><br><span class=\"line\">        rowMax = pow(<span class=\"number\">2</span>, row) - <span class=\"number\">1</span></span><br><span class=\"line\">        sm = rowMin + rowMax</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sm - label</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pathInZigZagTree</span><span class=\"params\">(self, label: int)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> label == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"number\">1</span>]</span><br><span class=\"line\">        ret = []</span><br><span class=\"line\">        ret.append(label)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> label != <span class=\"number\">1</span>:</span><br><span class=\"line\">            row = math.floor(math.log(label, <span class=\"number\">2</span>) + <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> row &amp; <span class=\"number\">1</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                label = self.findOriginIndex(label)</span><br><span class=\"line\">                label &gt;&gt;= <span class=\"number\">1</span></span><br><span class=\"line\">                ret.append(label)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            label &gt;&gt;= <span class=\"number\">1</span></span><br><span class=\"line\">            label = self.findOriginIndex(label)</span><br><span class=\"line\">            ret.append(label)</span><br><span class=\"line\">        ret.reverse()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br></pre></td></tr></table></figure>\n\n<p>Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">originIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> label)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> row = (<span class=\"keyword\">int</span>) Math.floor(Math.log(label) / Math.log(<span class=\"number\">2</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowMin = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, row - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rowMax = (<span class=\"keyword\">int</span>) (Math.pow(<span class=\"number\">2</span>,row) - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sm = rowMin + rowMax;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret = sm - label;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">pathInZigZagTree</span><span class=\"params\">(<span class=\"keyword\">int</span> label)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; ret = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        ret.add(label);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == label) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (label != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">int</span> row = (<span class=\"keyword\">int</span>) Math.floor(Math.log(label) / Math.log(<span class=\"number\">2</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> ((row &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \t\tlabel = <span class=\"keyword\">this</span>.originIndex(label);</span><br><span class=\"line\">        \t\tlabel = label &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        \t\tret.add(<span class=\"number\">0</span>, label);</span><br><span class=\"line\">        \t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \tlabel = label &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        \tlabel = <span class=\"keyword\">this</span>.originIndex(label);</span><br><span class=\"line\">        \tret.add(<span class=\"number\">0</span>,label);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"install shadowsocks","date":"2019-07-03T11:54:04.000Z","_content":"\n> 每次安装ss的时候都要网上搜索教程，所以自己记录一下，以后要用的时候，不用再费力查找。还有自己经常忘记启动命令，这里也做个备忘录。\n\n<!--more-->\n\n## 安装方法\n首先安装python pip(v2.6 or v2.7),对于RedHat系列和Debian系列，安装方法如下\n\n针对**Debain**系列\n```\napt-get install python-pip\n```\n针对**RedHat**系列\n```\nyum install python-setuptools && easy_install pip\n```\n\n运行`pip`命令安装shadowsocks\n```\npip install shadowsocks\n```\n运行`ssserver`命令检查是否安装成功\n\n## 运行服务\n开启ss服务有两种方法，一种是直接在命令行下输入参数启动：\n```\nssserver -p 8388 -k password -m aes-256-cfb\n```\n另一种是通过事先写好的配置文件启动，省去写端口、密码、加密方式的麻烦。\n\n新建配置文件：\n```\nvi /etc/shadowsocks.json\n```\n文件内容：\n```json\n{\n\t\"server\":\"my_server_ip\",\n\t\"server_port\":443,\n\t\"local_port\":1080,\n\t\"password\":\"mypassword\",\n\t\"timeout\":300,\n\t\"method\":\"aes-256-cfb\",\n}\n```\n各个配置项的含义如下：\n\n|配置项 |含义|\n|:-:|:-:|\n|server|服务器ip地址(0.0.0.0)|\n|server_port|服务监听端口|\n|local_port|本地转发端口|\n|password|密码|\n|timeout|连接超时时间|\n|method|加密方式|\n\n用如下命令启动和停止：\n```\nssserver -c /etc/shadowsocks.json\n```\n\n## 后台运行和停止\n```\nssserver -c /etc/shadowsocks.json -d start\nssserver -c /etc/shadowsocks.json -d stop\n```\n\n## 安装BBR加速\n> BBR 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。\n\n1.首先确认linux内核版本在4.9及以上，否则需要升级内核\n```\nuname -r\n```\n2.开启BBR:\n```\necho \"net.core.default_qdisc=fq\" >> /etc/sysctl.conf\necho \"net.ipv4.tcp_congestion_control=bbr\" >> /etc/sysctl.conf\nsysctl -p\n```\n3.验证\n\n*查看可用的拥塞控制算法*\n```\nsysctl net.ipv4.tcp_available_congestion_control\n```\n*得到*\n> net.ipv4.tcp_available_congestion_control = reno cubic bbr\n\n*检查BBR是否正常运行*\n```\nlsmod | grep tcp_bbr\n```\n> tcp_bbr 20480 1\n\n4.速度测试\n\n*安装speedtest-cli*\n```\npip install speedtest-cli\n```\n\n*运行*\n```\nspeedtest-cli\n```\n![speed测试结果](/images/speed.png)\n\n## Refer\n\n[shadowsocks官网](https://shadowsocks.org/en/index.html): https://shadowsocks.org/en/index.html\n\n[BBR项目地址](https://github.com/google/bbr): https://github.com/google/bbr\n\n[Speed的github地址](https://github.com/sivel/speedtest-cli): https://github.com/sivel/speedtest-cli","source":"_posts/2019-07-03-install-shadowsocks.md","raw":"---\ntitle: install shadowsocks\ndate: 2019-07-03 19:54:04\ntags:\n- Shadowsocks\n- Linux\ncategories:\n- 工具\n---\n\n> 每次安装ss的时候都要网上搜索教程，所以自己记录一下，以后要用的时候，不用再费力查找。还有自己经常忘记启动命令，这里也做个备忘录。\n\n<!--more-->\n\n## 安装方法\n首先安装python pip(v2.6 or v2.7),对于RedHat系列和Debian系列，安装方法如下\n\n针对**Debain**系列\n```\napt-get install python-pip\n```\n针对**RedHat**系列\n```\nyum install python-setuptools && easy_install pip\n```\n\n运行`pip`命令安装shadowsocks\n```\npip install shadowsocks\n```\n运行`ssserver`命令检查是否安装成功\n\n## 运行服务\n开启ss服务有两种方法，一种是直接在命令行下输入参数启动：\n```\nssserver -p 8388 -k password -m aes-256-cfb\n```\n另一种是通过事先写好的配置文件启动，省去写端口、密码、加密方式的麻烦。\n\n新建配置文件：\n```\nvi /etc/shadowsocks.json\n```\n文件内容：\n```json\n{\n\t\"server\":\"my_server_ip\",\n\t\"server_port\":443,\n\t\"local_port\":1080,\n\t\"password\":\"mypassword\",\n\t\"timeout\":300,\n\t\"method\":\"aes-256-cfb\",\n}\n```\n各个配置项的含义如下：\n\n|配置项 |含义|\n|:-:|:-:|\n|server|服务器ip地址(0.0.0.0)|\n|server_port|服务监听端口|\n|local_port|本地转发端口|\n|password|密码|\n|timeout|连接超时时间|\n|method|加密方式|\n\n用如下命令启动和停止：\n```\nssserver -c /etc/shadowsocks.json\n```\n\n## 后台运行和停止\n```\nssserver -c /etc/shadowsocks.json -d start\nssserver -c /etc/shadowsocks.json -d stop\n```\n\n## 安装BBR加速\n> BBR 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。\n\n1.首先确认linux内核版本在4.9及以上，否则需要升级内核\n```\nuname -r\n```\n2.开启BBR:\n```\necho \"net.core.default_qdisc=fq\" >> /etc/sysctl.conf\necho \"net.ipv4.tcp_congestion_control=bbr\" >> /etc/sysctl.conf\nsysctl -p\n```\n3.验证\n\n*查看可用的拥塞控制算法*\n```\nsysctl net.ipv4.tcp_available_congestion_control\n```\n*得到*\n> net.ipv4.tcp_available_congestion_control = reno cubic bbr\n\n*检查BBR是否正常运行*\n```\nlsmod | grep tcp_bbr\n```\n> tcp_bbr 20480 1\n\n4.速度测试\n\n*安装speedtest-cli*\n```\npip install speedtest-cli\n```\n\n*运行*\n```\nspeedtest-cli\n```\n![speed测试结果](/images/speed.png)\n\n## Refer\n\n[shadowsocks官网](https://shadowsocks.org/en/index.html): https://shadowsocks.org/en/index.html\n\n[BBR项目地址](https://github.com/google/bbr): https://github.com/google/bbr\n\n[Speed的github地址](https://github.com/sivel/speedtest-cli): https://github.com/sivel/speedtest-cli","slug":"install-shadowsocks","published":1,"updated":"2019-07-05T11:43:35.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy1bba6w0009okujbml1y90i","content":"<blockquote>\n<p>每次安装ss的时候都要网上搜索教程，所以自己记录一下，以后要用的时候，不用再费力查找。还有自己经常忘记启动命令，这里也做个备忘录。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h2><p>首先安装python pip(v2.6 or v2.7),对于RedHat系列和Debian系列，安装方法如下</p>\n<p>针对<strong>Debain</strong>系列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br></pre></td></tr></table></figure>\n\n<p>针对<strong>RedHat</strong>系列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>pip</code>命令安装shadowsocks</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>ssserver</code>命令检查是否安装成功</p>\n<h2 id=\"运行服务\"><a href=\"#运行服务\" class=\"headerlink\" title=\"运行服务\"></a>运行服务</h2><p>开启ss服务有两种方法，一种是直接在命令行下输入参数启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -p 8388 -k password -m aes-256-cfb</span><br></pre></td></tr></table></figure>\n\n<p>另一种是通过事先写好的配置文件启动，省去写端口、密码、加密方式的麻烦。</p>\n<p>新建配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n\n<p>文件内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"server\"</span>:<span class=\"string\">\"my_server_ip\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"server_port\"</span>:<span class=\"number\">443</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"password\"</span>:<span class=\"string\">\"mypassword\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>各个配置项的含义如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">server</td>\n<td align=\"center\">服务器ip地址(0.0.0.0)</td>\n</tr>\n<tr>\n<td align=\"center\">server_port</td>\n<td align=\"center\">服务监听端口</td>\n</tr>\n<tr>\n<td align=\"center\">local_port</td>\n<td align=\"center\">本地转发端口</td>\n</tr>\n<tr>\n<td align=\"center\">password</td>\n<td align=\"center\">密码</td>\n</tr>\n<tr>\n<td align=\"center\">timeout</td>\n<td align=\"center\">连接超时时间</td>\n</tr>\n<tr>\n<td align=\"center\">method</td>\n<td align=\"center\">加密方式</td>\n</tr>\n</tbody></table>\n<p>用如下命令启动和停止：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后台运行和停止\"><a href=\"#后台运行和停止\" class=\"headerlink\" title=\"后台运行和停止\"></a>后台运行和停止</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装BBR加速\"><a href=\"#安装BBR加速\" class=\"headerlink\" title=\"安装BBR加速\"></a>安装BBR加速</h2><blockquote>\n<p>BBR 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。</p>\n</blockquote>\n<p>1.首先确认linux内核版本在4.9及以上，否则需要升级内核</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br></pre></td></tr></table></figure>\n\n<p>2.开启BBR:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n\n<p>3.验证</p>\n<p><em>查看可用的拥塞控制算法</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>\n\n<p><em>得到</em></p>\n<blockquote>\n<p>net.ipv4.tcp_available_congestion_control = reno cubic bbr</p>\n</blockquote>\n<p><em>检查BBR是否正常运行</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep tcp_bbr</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>tcp_bbr 20480 1</p>\n</blockquote>\n<p>4.速度测试</p>\n<p><em>安装speedtest-cli</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install speedtest-cli</span><br></pre></td></tr></table></figure>\n\n<p><em>运行</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">speedtest-cli</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/speed.png\" alt=\"speed测试结果\"></p>\n<h2 id=\"Refer\"><a href=\"#Refer\" class=\"headerlink\" title=\"Refer\"></a>Refer</h2><p><a href=\"https://shadowsocks.org/en/index.html\" target=\"_blank\" rel=\"noopener\">shadowsocks官网</a>: <a href=\"https://shadowsocks.org/en/index.html\" target=\"_blank\" rel=\"noopener\">https://shadowsocks.org/en/index.html</a></p>\n<p><a href=\"https://github.com/google/bbr\" target=\"_blank\" rel=\"noopener\">BBR项目地址</a>: <a href=\"https://github.com/google/bbr\" target=\"_blank\" rel=\"noopener\">https://github.com/google/bbr</a></p>\n<p><a href=\"https://github.com/sivel/speedtest-cli\" target=\"_blank\" rel=\"noopener\">Speed的github地址</a>: <a href=\"https://github.com/sivel/speedtest-cli\" target=\"_blank\" rel=\"noopener\">https://github.com/sivel/speedtest-cli</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>每次安装ss的时候都要网上搜索教程，所以自己记录一下，以后要用的时候，不用再费力查找。还有自己经常忘记启动命令，这里也做个备忘录。</p>\n</blockquote>","more":"<h2 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h2><p>首先安装python pip(v2.6 or v2.7),对于RedHat系列和Debian系列，安装方法如下</p>\n<p>针对<strong>Debain</strong>系列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br></pre></td></tr></table></figure>\n\n<p>针对<strong>RedHat</strong>系列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>pip</code>命令安装shadowsocks</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>ssserver</code>命令检查是否安装成功</p>\n<h2 id=\"运行服务\"><a href=\"#运行服务\" class=\"headerlink\" title=\"运行服务\"></a>运行服务</h2><p>开启ss服务有两种方法，一种是直接在命令行下输入参数启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -p 8388 -k password -m aes-256-cfb</span><br></pre></td></tr></table></figure>\n\n<p>另一种是通过事先写好的配置文件启动，省去写端口、密码、加密方式的麻烦。</p>\n<p>新建配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n\n<p>文件内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"server\"</span>:<span class=\"string\">\"my_server_ip\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"server_port\"</span>:<span class=\"number\">443</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"password\"</span>:<span class=\"string\">\"mypassword\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>各个配置项的含义如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">server</td>\n<td align=\"center\">服务器ip地址(0.0.0.0)</td>\n</tr>\n<tr>\n<td align=\"center\">server_port</td>\n<td align=\"center\">服务监听端口</td>\n</tr>\n<tr>\n<td align=\"center\">local_port</td>\n<td align=\"center\">本地转发端口</td>\n</tr>\n<tr>\n<td align=\"center\">password</td>\n<td align=\"center\">密码</td>\n</tr>\n<tr>\n<td align=\"center\">timeout</td>\n<td align=\"center\">连接超时时间</td>\n</tr>\n<tr>\n<td align=\"center\">method</td>\n<td align=\"center\">加密方式</td>\n</tr>\n</tbody></table>\n<p>用如下命令启动和停止：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后台运行和停止\"><a href=\"#后台运行和停止\" class=\"headerlink\" title=\"后台运行和停止\"></a>后台运行和停止</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装BBR加速\"><a href=\"#安装BBR加速\" class=\"headerlink\" title=\"安装BBR加速\"></a>安装BBR加速</h2><blockquote>\n<p>BBR 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。</p>\n</blockquote>\n<p>1.首先确认linux内核版本在4.9及以上，否则需要升级内核</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br></pre></td></tr></table></figure>\n\n<p>2.开启BBR:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n\n<p>3.验证</p>\n<p><em>查看可用的拥塞控制算法</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>\n\n<p><em>得到</em></p>\n<blockquote>\n<p>net.ipv4.tcp_available_congestion_control = reno cubic bbr</p>\n</blockquote>\n<p><em>检查BBR是否正常运行</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep tcp_bbr</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>tcp_bbr 20480 1</p>\n</blockquote>\n<p>4.速度测试</p>\n<p><em>安装speedtest-cli</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install speedtest-cli</span><br></pre></td></tr></table></figure>\n\n<p><em>运行</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">speedtest-cli</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/speed.png\" alt=\"speed测试结果\"></p>\n<h2 id=\"Refer\"><a href=\"#Refer\" class=\"headerlink\" title=\"Refer\"></a>Refer</h2><p><a href=\"https://shadowsocks.org/en/index.html\" target=\"_blank\" rel=\"noopener\">shadowsocks官网</a>: <a href=\"https://shadowsocks.org/en/index.html\" target=\"_blank\" rel=\"noopener\">https://shadowsocks.org/en/index.html</a></p>\n<p><a href=\"https://github.com/google/bbr\" target=\"_blank\" rel=\"noopener\">BBR项目地址</a>: <a href=\"https://github.com/google/bbr\" target=\"_blank\" rel=\"noopener\">https://github.com/google/bbr</a></p>\n<p><a href=\"https://github.com/sivel/speedtest-cli\" target=\"_blank\" rel=\"noopener\">Speed的github地址</a>: <a href=\"https://github.com/sivel/speedtest-cli\" target=\"_blank\" rel=\"noopener\">https://github.com/sivel/speedtest-cli</a></p>"},{"title":"LeetCode 1103.Distribute Candies to People","date":"2019-07-05T13:29:02.000Z","_content":"\n我们买了一些糖果 candies，打算把它们分给排好队的 n = num_people 个小朋友。给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 n 颗糖果。然后，我们再回到队伍的起点，给第一个小朋友 n + 1 颗糖果，第二个小朋友 n + 2 颗，依此类推，直到给最后一个小朋友 2 * n 颗糖果。重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。返回一个长度为 num_people、元素之和为 candies 的数组，以表示糖果的最终分发情况（即 ans[i] 表示第 i 个小朋友分到的糖果数）\n\n<!--more-->\n\n**Example 1:**\n\n```\nInput: candies = 7, num_people = 4\nOutput: [1,2,3,1]\n```\n\n**Example 2:**\n\n```\nInput: candies = 10, num_people = 3\nOutput: [5,2,3]\n```\n\n**Constraints:**\n\n1 <= candies <= 10^9\n1 <= num_people <= 1000\n\n# Solution\n第1次:\n1 2 3 ... n (sum=one)\n\n第2次：\n1+n 2+n 3+n ... n+n (sum=one+n*n)\n\n第3次:\n1+2n 2+2n 3+2n ... n+2n (sum=one+2\\*n\\*n)\n\n所以第i次：\n1+(i-1)n 2+(i-1)n ... n+(i-1)n (sum=one+(i-1)\\*n\\*n)\n\n首先计算能完整分发几次(总的不断减去sum判断余下的够不够下一个sum),将余下不足完成一次完整遍历的按上述规律一个个分发。\n\n```python\nclass Solution:\n    def distributeCandies(self, candies, num_people):\n        one = (num_people+1)*num_people//2\n        ret = []\n        if one >= candies:\n            need = 1\n            i = 0 \n            while candies >= need:\n                ret.append(need)\n                candies -= need\n                need += 1\n                i += 1\n            if candies >0 :\n                ret.append(candies)\n                i += 1\n            while i < num_people:\n                ret.append(0)\n                i += 1\n            return ret\n        need = one\n        i = 0\n        while candies >= need:\n            candies -= need\n            i+=1\n            need = one + num_people*num_people*i\n        tail = (i * i - i) // 2 * num_people \n        ret = [j * i + tail for j in range(1, num_people + 1)]\n        tail *= num_people\n        pre = num_people * i\n        need = pre + 1\n        i = 0\n        while candies >= need:\n            ret[i] += need\n            i += 1\n            candies -= need\n            need += 1\n        if candies > 0:\n            ret[i] += candies\n        return ret\n```\n","source":"_posts/2019-07-05-LeetCode-1103-Distribute-Candies-to-People.md","raw":"---\ntitle: LeetCode 1103.Distribute Candies to People\ndate: 2019-07-05 21:29:02\ntags:\n- 题解\n- Easy\ncategories:\n- LeetCode\n---\n\n我们买了一些糖果 candies，打算把它们分给排好队的 n = num_people 个小朋友。给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 n 颗糖果。然后，我们再回到队伍的起点，给第一个小朋友 n + 1 颗糖果，第二个小朋友 n + 2 颗，依此类推，直到给最后一个小朋友 2 * n 颗糖果。重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。返回一个长度为 num_people、元素之和为 candies 的数组，以表示糖果的最终分发情况（即 ans[i] 表示第 i 个小朋友分到的糖果数）\n\n<!--more-->\n\n**Example 1:**\n\n```\nInput: candies = 7, num_people = 4\nOutput: [1,2,3,1]\n```\n\n**Example 2:**\n\n```\nInput: candies = 10, num_people = 3\nOutput: [5,2,3]\n```\n\n**Constraints:**\n\n1 <= candies <= 10^9\n1 <= num_people <= 1000\n\n# Solution\n第1次:\n1 2 3 ... n (sum=one)\n\n第2次：\n1+n 2+n 3+n ... n+n (sum=one+n*n)\n\n第3次:\n1+2n 2+2n 3+2n ... n+2n (sum=one+2\\*n\\*n)\n\n所以第i次：\n1+(i-1)n 2+(i-1)n ... n+(i-1)n (sum=one+(i-1)\\*n\\*n)\n\n首先计算能完整分发几次(总的不断减去sum判断余下的够不够下一个sum),将余下不足完成一次完整遍历的按上述规律一个个分发。\n\n```python\nclass Solution:\n    def distributeCandies(self, candies, num_people):\n        one = (num_people+1)*num_people//2\n        ret = []\n        if one >= candies:\n            need = 1\n            i = 0 \n            while candies >= need:\n                ret.append(need)\n                candies -= need\n                need += 1\n                i += 1\n            if candies >0 :\n                ret.append(candies)\n                i += 1\n            while i < num_people:\n                ret.append(0)\n                i += 1\n            return ret\n        need = one\n        i = 0\n        while candies >= need:\n            candies -= need\n            i+=1\n            need = one + num_people*num_people*i\n        tail = (i * i - i) // 2 * num_people \n        ret = [j * i + tail for j in range(1, num_people + 1)]\n        tail *= num_people\n        pre = num_people * i\n        need = pre + 1\n        i = 0\n        while candies >= need:\n            ret[i] += need\n            i += 1\n            candies -= need\n            need += 1\n        if candies > 0:\n            ret[i] += candies\n        return ret\n```\n","slug":"LeetCode-1103-Distribute-Candies-to-People","published":1,"updated":"2019-07-05T13:35:58.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy1bba6z000aokujzhpiex1h","content":"<p>我们买了一些糖果 candies，打算把它们分给排好队的 n = num_people 个小朋友。给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 n 颗糖果。然后，我们再回到队伍的起点，给第一个小朋友 n + 1 颗糖果，第二个小朋友 n + 2 颗，依此类推，直到给最后一个小朋友 2 * n 颗糖果。重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。返回一个长度为 num_people、元素之和为 candies 的数组，以表示糖果的最终分发情况（即 ans[i] 表示第 i 个小朋友分到的糖果数）</p>\n<a id=\"more\"></a>\n\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: candies = 7, num_people = 4</span><br><span class=\"line\">Output: [1,2,3,1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: candies = 10, num_people = 3</span><br><span class=\"line\">Output: [5,2,3]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Constraints:</strong></p>\n<p>1 &lt;= candies &lt;= 10^9<br>1 &lt;= num_people &lt;= 1000</p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>第1次:<br>1 2 3 … n (sum=one)</p>\n<p>第2次：<br>1+n 2+n 3+n … n+n (sum=one+n*n)</p>\n<p>第3次:<br>1+2n 2+2n 3+2n … n+2n (sum=one+2*n*n)</p>\n<p>所以第i次：<br>1+(i-1)n 2+(i-1)n … n+(i-1)n (sum=one+(i-1)*n*n)</p>\n<p>首先计算能完整分发几次(总的不断减去sum判断余下的够不够下一个sum),将余下不足完成一次完整遍历的按上述规律一个个分发。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">distributeCandies</span><span class=\"params\">(self, candies, num_people)</span>:</span></span><br><span class=\"line\">        one = (num_people+<span class=\"number\">1</span>)*num_people//<span class=\"number\">2</span></span><br><span class=\"line\">        ret = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> one &gt;= candies:</span><br><span class=\"line\">            need = <span class=\"number\">1</span></span><br><span class=\"line\">            i = <span class=\"number\">0</span> </span><br><span class=\"line\">            <span class=\"keyword\">while</span> candies &gt;= need:</span><br><span class=\"line\">                ret.append(need)</span><br><span class=\"line\">                candies -= need</span><br><span class=\"line\">                need += <span class=\"number\">1</span></span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> candies &gt;<span class=\"number\">0</span> :</span><br><span class=\"line\">                ret.append(candies)</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> i &lt; num_people:</span><br><span class=\"line\">                ret.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">        need = one</span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> candies &gt;= need:</span><br><span class=\"line\">            candies -= need</span><br><span class=\"line\">            i+=<span class=\"number\">1</span></span><br><span class=\"line\">            need = one + num_people*num_people*i</span><br><span class=\"line\">        tail = (i * i - i) // <span class=\"number\">2</span> * num_people </span><br><span class=\"line\">        ret = [j * i + tail <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, num_people + <span class=\"number\">1</span>)]</span><br><span class=\"line\">        tail *= num_people</span><br><span class=\"line\">        pre = num_people * i</span><br><span class=\"line\">        need = pre + <span class=\"number\">1</span></span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> candies &gt;= need:</span><br><span class=\"line\">            ret[i] += need</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            candies -= need</span><br><span class=\"line\">            need += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> candies &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            ret[i] += candies</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>我们买了一些糖果 candies，打算把它们分给排好队的 n = num_people 个小朋友。给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 n 颗糖果。然后，我们再回到队伍的起点，给第一个小朋友 n + 1 颗糖果，第二个小朋友 n + 2 颗，依此类推，直到给最后一个小朋友 2 * n 颗糖果。重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。返回一个长度为 num_people、元素之和为 candies 的数组，以表示糖果的最终分发情况（即 ans[i] 表示第 i 个小朋友分到的糖果数）</p>","more":"<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: candies = 7, num_people = 4</span><br><span class=\"line\">Output: [1,2,3,1]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: candies = 10, num_people = 3</span><br><span class=\"line\">Output: [5,2,3]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Constraints:</strong></p>\n<p>1 &lt;= candies &lt;= 10^9<br>1 &lt;= num_people &lt;= 1000</p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>第1次:<br>1 2 3 … n (sum=one)</p>\n<p>第2次：<br>1+n 2+n 3+n … n+n (sum=one+n*n)</p>\n<p>第3次:<br>1+2n 2+2n 3+2n … n+2n (sum=one+2*n*n)</p>\n<p>所以第i次：<br>1+(i-1)n 2+(i-1)n … n+(i-1)n (sum=one+(i-1)*n*n)</p>\n<p>首先计算能完整分发几次(总的不断减去sum判断余下的够不够下一个sum),将余下不足完成一次完整遍历的按上述规律一个个分发。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">distributeCandies</span><span class=\"params\">(self, candies, num_people)</span>:</span></span><br><span class=\"line\">        one = (num_people+<span class=\"number\">1</span>)*num_people//<span class=\"number\">2</span></span><br><span class=\"line\">        ret = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> one &gt;= candies:</span><br><span class=\"line\">            need = <span class=\"number\">1</span></span><br><span class=\"line\">            i = <span class=\"number\">0</span> </span><br><span class=\"line\">            <span class=\"keyword\">while</span> candies &gt;= need:</span><br><span class=\"line\">                ret.append(need)</span><br><span class=\"line\">                candies -= need</span><br><span class=\"line\">                need += <span class=\"number\">1</span></span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> candies &gt;<span class=\"number\">0</span> :</span><br><span class=\"line\">                ret.append(candies)</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> i &lt; num_people:</span><br><span class=\"line\">                ret.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">        need = one</span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> candies &gt;= need:</span><br><span class=\"line\">            candies -= need</span><br><span class=\"line\">            i+=<span class=\"number\">1</span></span><br><span class=\"line\">            need = one + num_people*num_people*i</span><br><span class=\"line\">        tail = (i * i - i) // <span class=\"number\">2</span> * num_people </span><br><span class=\"line\">        ret = [j * i + tail <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, num_people + <span class=\"number\">1</span>)]</span><br><span class=\"line\">        tail *= num_people</span><br><span class=\"line\">        pre = num_people * i</span><br><span class=\"line\">        need = pre + <span class=\"number\">1</span></span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> candies &gt;= need:</span><br><span class=\"line\">            ret[i] += need</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            candies -= need</span><br><span class=\"line\">            need += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> candies &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            ret[i] += candies</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br></pre></td></tr></table></figure>"},{"title":"213. House Robber II","date":"2019-07-09T13:41:41.000Z","_content":"\n# Question\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n\n<!--more-->\n\nExample 1:\n```\nInput: [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),\n             because they are adjacent houses.\n```\n\nExample 2:\n```\nInput: [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n             Total amount you can rob = 1 + 3 = 4.\n```\n\n# Solution\n和**House Robber I**的不同点就是房子是围城一个圈的，即若偷第一个房子，则最后一个房子不能偷了\n\n\n第一个房子偷与不偷的两种情况如下：\n1. 偷第一个房子,则最后一个不能偷了，即`nums[2:-1]`按照**House Robber I**求解, 结果再加上nums[0]\n2. 不偷第一个房子，后面`nums[1:]按`照**House Robber I**求解\n\n上面两种情况的最大值即为解。\n\nPython:\n```python\nclass Solution:\n    def rrob(self, nums, i, j,dc):\n        if (i,j) in dc:\n            return dc[(i,j)]\n        length = j-i\n        if length == 0 :\n            return 0\n        if length <= 2:\n            return max(nums[i:j])\n        ans = max(self.rrob(nums,i+2,j,dc)+nums[i],self.rrob(nums,i+1,j,dc))\n        dc[(i,j)] = ans\n        return ans\n    def rob(self, nums: List[int]) -> int:\n        length = len(nums)\n        if length == 0 :\n            return 0\n        if length<=3:\n            return max(nums)\n        ans = 0\n        dc = dict()\n        ans = max(self.rrob(nums,2,length-1,dc)+nums[0],self.rrob(nums,1,length,dc))\n        return ans   \n```","source":"_posts/2019-07-09-213-House-Robber-II.md","raw":"---\ntitle: 213. House Robber II\ndate: 2019-07-09 21:41:41\ntags:\n- 题解\n- Medium\n- 动态规划\ncategories:\n- LeetCode\n---\n\n# Question\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n\n<!--more-->\n\nExample 1:\n```\nInput: [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),\n             because they are adjacent houses.\n```\n\nExample 2:\n```\nInput: [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n             Total amount you can rob = 1 + 3 = 4.\n```\n\n# Solution\n和**House Robber I**的不同点就是房子是围城一个圈的，即若偷第一个房子，则最后一个房子不能偷了\n\n\n第一个房子偷与不偷的两种情况如下：\n1. 偷第一个房子,则最后一个不能偷了，即`nums[2:-1]`按照**House Robber I**求解, 结果再加上nums[0]\n2. 不偷第一个房子，后面`nums[1:]按`照**House Robber I**求解\n\n上面两种情况的最大值即为解。\n\nPython:\n```python\nclass Solution:\n    def rrob(self, nums, i, j,dc):\n        if (i,j) in dc:\n            return dc[(i,j)]\n        length = j-i\n        if length == 0 :\n            return 0\n        if length <= 2:\n            return max(nums[i:j])\n        ans = max(self.rrob(nums,i+2,j,dc)+nums[i],self.rrob(nums,i+1,j,dc))\n        dc[(i,j)] = ans\n        return ans\n    def rob(self, nums: List[int]) -> int:\n        length = len(nums)\n        if length == 0 :\n            return 0\n        if length<=3:\n            return max(nums)\n        ans = 0\n        dc = dict()\n        ans = max(self.rrob(nums,2,length-1,dc)+nums[0],self.rrob(nums,1,length,dc))\n        return ans   \n```","slug":"213-House-Robber-II","published":1,"updated":"2019-07-09T14:02:06.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy1bba72000bokujepxxw6wz","content":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>\n<a id=\"more\"></a>\n\n<p>Example 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [2,3,2]</span><br><span class=\"line\">Output: 3</span><br><span class=\"line\">Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),</span><br><span class=\"line\">             because they are adjacent houses.</span><br></pre></td></tr></table></figure>\n\n<p>Example 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [1,2,3,1]</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</span><br><span class=\"line\">             Total amount you can rob = 1 + 3 = 4.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>和<strong>House Robber I</strong>的不同点就是房子是围城一个圈的，即若偷第一个房子，则最后一个房子不能偷了</p>\n<p>第一个房子偷与不偷的两种情况如下：</p>\n<ol>\n<li>偷第一个房子,则最后一个不能偷了，即<code>nums[2:-1]</code>按照<strong>House Robber I</strong>求解, 结果再加上nums[0]</li>\n<li>不偷第一个房子，后面<code>nums[1:]按</code>照<strong>House Robber I</strong>求解</li>\n</ol>\n<p>上面两种情况的最大值即为解。</p>\n<p>Python:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rrob</span><span class=\"params\">(self, nums, i, j,dc)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i,j) <span class=\"keyword\">in</span> dc:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dc[(i,j)]</span><br><span class=\"line\">        length = j-i</span><br><span class=\"line\">        <span class=\"keyword\">if</span> length == <span class=\"number\">0</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(nums[i:j])</span><br><span class=\"line\">        ans = max(self.rrob(nums,i+<span class=\"number\">2</span>,j,dc)+nums[i],self.rrob(nums,i+<span class=\"number\">1</span>,j,dc))</span><br><span class=\"line\">        dc[(i,j)] = ans</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rob</span><span class=\"params\">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class=\"line\">        length = len(nums)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> length == <span class=\"number\">0</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> length&lt;=<span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(nums)</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        dc = dict()</span><br><span class=\"line\">        ans = max(self.rrob(nums,<span class=\"number\">2</span>,length<span class=\"number\">-1</span>,dc)+nums[<span class=\"number\">0</span>],self.rrob(nums,<span class=\"number\">1</span>,length,dc))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>","more":"<p>Example 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [2,3,2]</span><br><span class=\"line\">Output: 3</span><br><span class=\"line\">Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),</span><br><span class=\"line\">             because they are adjacent houses.</span><br></pre></td></tr></table></figure>\n\n<p>Example 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [1,2,3,1]</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</span><br><span class=\"line\">             Total amount you can rob = 1 + 3 = 4.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>和<strong>House Robber I</strong>的不同点就是房子是围城一个圈的，即若偷第一个房子，则最后一个房子不能偷了</p>\n<p>第一个房子偷与不偷的两种情况如下：</p>\n<ol>\n<li>偷第一个房子,则最后一个不能偷了，即<code>nums[2:-1]</code>按照<strong>House Robber I</strong>求解, 结果再加上nums[0]</li>\n<li>不偷第一个房子，后面<code>nums[1:]按</code>照<strong>House Robber I</strong>求解</li>\n</ol>\n<p>上面两种情况的最大值即为解。</p>\n<p>Python:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rrob</span><span class=\"params\">(self, nums, i, j,dc)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i,j) <span class=\"keyword\">in</span> dc:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dc[(i,j)]</span><br><span class=\"line\">        length = j-i</span><br><span class=\"line\">        <span class=\"keyword\">if</span> length == <span class=\"number\">0</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(nums[i:j])</span><br><span class=\"line\">        ans = max(self.rrob(nums,i+<span class=\"number\">2</span>,j,dc)+nums[i],self.rrob(nums,i+<span class=\"number\">1</span>,j,dc))</span><br><span class=\"line\">        dc[(i,j)] = ans</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rob</span><span class=\"params\">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class=\"line\">        length = len(nums)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> length == <span class=\"number\">0</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> length&lt;=<span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(nums)</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        dc = dict()</span><br><span class=\"line\">        ans = max(self.rrob(nums,<span class=\"number\">2</span>,length<span class=\"number\">-1</span>,dc)+nums[<span class=\"number\">0</span>],self.rrob(nums,<span class=\"number\">1</span>,length,dc))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>"},{"title":"1190.航班预订统计","date":"2019-07-08T12:12:16.000Z","_content":"\n# Question\n这里有 n 个航班，它们分别从 1 到 n 进行编号。我们这儿有一份航班预订表，表中第 i 条预订记录 bookings[i] = [i, j, k] 意味着我们在从 i 到 j 的每个航班上预订了 k 个座位。请你返回一个长度为 n 的数组 answer，按航班编号顺序返回每个航班上预订的座位数。\n\n<!--more-->\n\n示例:\n```\n输入：bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\n输出：[10,55,45,25,25]\n```\n\n提示:\n```\n1 <= bookings.length <= 20000\n1 <= bookings[i][0] <= bookings[i][1] <= n <= 20000\n1 <= bookings[i][2] <= 10000\n```\n\n# Solution\n\n首先想到的是暴力求解，设置一个数组`corp[n]`,遍历`bookings`，对于每一个`bookings[i]`，将`i`到`j`之间的所有`corp[m]`都加上`K`。但是无疑超时了。\n\n然后是利用差分的思想，设置一个数组`corp[n]`,每个`corp[i]`意义为 其比前一个`corp[i-1]`多出的航班座位数目。遍历`bookings`，对于每一个`bookings[i]`，将`corp[i]+k`,将`corp[j+1]-k`,这样`i`到`j`的航班座位数就能够根据首尾的两个值计算出来。公式是`corp[i]=corp[i]+corp[i-1]`。\n\nJava:\n```java\nclass Solution {\n    public int[] corpFlightBookings(int[][] bookings, int n) {\n        int[] tag = new int[n];\n        for (int[] book : bookings){\n            tag[book[0]-1] += book[2];\n            int j = book[1];\n            if (j<n){\n                tag[j]-=book[2];\n            }\n        }\n        for (int i=1;i<n;i++){\n            tag[i]=tag[i-1]+tag[i];\n        }\n        return tag;\n    }\n}\n```\nPython\n```python\nclass Solution:\n    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:\n        answer = [0]*n\n        for i in bookings:\n            answer[i[0]-1]+=i[2]\n            if i[1]<n:\n                answer[i[1]]-=i[2]\n        for i in range(1,n):\n            answer[i]=answer[i-1]+answer[i]\n        return answer\n```\n","source":"_posts/2019-07-08-1190-航班预订统计.md","raw":"---\ntitle: 1190.航班预订统计\ndate: 2019-07-08 20:12:16\ntags:\n- Medium\n- 题解\n- 差分\ncategories:\n- LeetCode\n---\n\n# Question\n这里有 n 个航班，它们分别从 1 到 n 进行编号。我们这儿有一份航班预订表，表中第 i 条预订记录 bookings[i] = [i, j, k] 意味着我们在从 i 到 j 的每个航班上预订了 k 个座位。请你返回一个长度为 n 的数组 answer，按航班编号顺序返回每个航班上预订的座位数。\n\n<!--more-->\n\n示例:\n```\n输入：bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\n输出：[10,55,45,25,25]\n```\n\n提示:\n```\n1 <= bookings.length <= 20000\n1 <= bookings[i][0] <= bookings[i][1] <= n <= 20000\n1 <= bookings[i][2] <= 10000\n```\n\n# Solution\n\n首先想到的是暴力求解，设置一个数组`corp[n]`,遍历`bookings`，对于每一个`bookings[i]`，将`i`到`j`之间的所有`corp[m]`都加上`K`。但是无疑超时了。\n\n然后是利用差分的思想，设置一个数组`corp[n]`,每个`corp[i]`意义为 其比前一个`corp[i-1]`多出的航班座位数目。遍历`bookings`，对于每一个`bookings[i]`，将`corp[i]+k`,将`corp[j+1]-k`,这样`i`到`j`的航班座位数就能够根据首尾的两个值计算出来。公式是`corp[i]=corp[i]+corp[i-1]`。\n\nJava:\n```java\nclass Solution {\n    public int[] corpFlightBookings(int[][] bookings, int n) {\n        int[] tag = new int[n];\n        for (int[] book : bookings){\n            tag[book[0]-1] += book[2];\n            int j = book[1];\n            if (j<n){\n                tag[j]-=book[2];\n            }\n        }\n        for (int i=1;i<n;i++){\n            tag[i]=tag[i-1]+tag[i];\n        }\n        return tag;\n    }\n}\n```\nPython\n```python\nclass Solution:\n    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:\n        answer = [0]*n\n        for i in bookings:\n            answer[i[0]-1]+=i[2]\n            if i[1]<n:\n                answer[i[1]]-=i[2]\n        for i in range(1,n):\n            answer[i]=answer[i-1]+answer[i]\n        return answer\n```\n","slug":"1190-航班预订统计","published":1,"updated":"2019-07-08T12:37:29.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy1bba76000cokujg76iyj4p","content":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>这里有 n 个航班，它们分别从 1 到 n 进行编号。我们这儿有一份航班预订表，表中第 i 条预订记录 bookings[i] = [i, j, k] 意味着我们在从 i 到 j 的每个航班上预订了 k 个座位。请你返回一个长度为 n 的数组 answer，按航班编号顺序返回每个航班上预订的座位数。</p>\n<a id=\"more\"></a>\n\n<p>示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5</span><br><span class=\"line\">输出：[10,55,45,25,25]</span><br></pre></td></tr></table></figure>\n\n<p>提示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= bookings.length &lt;= 20000</span><br><span class=\"line\">1 &lt;= bookings[i][0] &lt;= bookings[i][1] &lt;= n &lt;= 20000</span><br><span class=\"line\">1 &lt;= bookings[i][2] &lt;= 10000</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>首先想到的是暴力求解，设置一个数组<code>corp[n]</code>,遍历<code>bookings</code>，对于每一个<code>bookings[i]</code>，将<code>i</code>到<code>j</code>之间的所有<code>corp[m]</code>都加上<code>K</code>。但是无疑超时了。</p>\n<p>然后是利用差分的思想，设置一个数组<code>corp[n]</code>,每个<code>corp[i]</code>意义为 其比前一个<code>corp[i-1]</code>多出的航班座位数目。遍历<code>bookings</code>，对于每一个<code>bookings[i]</code>，将<code>corp[i]+k</code>,将<code>corp[j+1]-k</code>,这样<code>i</code>到<code>j</code>的航班座位数就能够根据首尾的两个值计算出来。公式是<code>corp[i]=corp[i]+corp[i-1]</code>。</p>\n<p>Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] corpFlightBookings(<span class=\"keyword\">int</span>[][] bookings, <span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] tag = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] book : bookings)&#123;</span><br><span class=\"line\">            tag[book[<span class=\"number\">0</span>]-<span class=\"number\">1</span>] += book[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = book[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j&lt;n)&#123;</span><br><span class=\"line\">                tag[j]-=book[<span class=\"number\">2</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            tag[i]=tag[i-<span class=\"number\">1</span>]+tag[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">corpFlightBookings</span><span class=\"params\">(self, bookings: List[List[int]], n: int)</span> -&gt; List[int]:</span></span><br><span class=\"line\">        answer = [<span class=\"number\">0</span>]*n</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> bookings:</span><br><span class=\"line\">            answer[i[<span class=\"number\">0</span>]<span class=\"number\">-1</span>]+=i[<span class=\"number\">2</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i[<span class=\"number\">1</span>]&lt;n:</span><br><span class=\"line\">                answer[i[<span class=\"number\">1</span>]]-=i[<span class=\"number\">2</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">            answer[i]=answer[i<span class=\"number\">-1</span>]+answer[i]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>这里有 n 个航班，它们分别从 1 到 n 进行编号。我们这儿有一份航班预订表，表中第 i 条预订记录 bookings[i] = [i, j, k] 意味着我们在从 i 到 j 的每个航班上预订了 k 个座位。请你返回一个长度为 n 的数组 answer，按航班编号顺序返回每个航班上预订的座位数。</p>","more":"<p>示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5</span><br><span class=\"line\">输出：[10,55,45,25,25]</span><br></pre></td></tr></table></figure>\n\n<p>提示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= bookings.length &lt;= 20000</span><br><span class=\"line\">1 &lt;= bookings[i][0] &lt;= bookings[i][1] &lt;= n &lt;= 20000</span><br><span class=\"line\">1 &lt;= bookings[i][2] &lt;= 10000</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>首先想到的是暴力求解，设置一个数组<code>corp[n]</code>,遍历<code>bookings</code>，对于每一个<code>bookings[i]</code>，将<code>i</code>到<code>j</code>之间的所有<code>corp[m]</code>都加上<code>K</code>。但是无疑超时了。</p>\n<p>然后是利用差分的思想，设置一个数组<code>corp[n]</code>,每个<code>corp[i]</code>意义为 其比前一个<code>corp[i-1]</code>多出的航班座位数目。遍历<code>bookings</code>，对于每一个<code>bookings[i]</code>，将<code>corp[i]+k</code>,将<code>corp[j+1]-k</code>,这样<code>i</code>到<code>j</code>的航班座位数就能够根据首尾的两个值计算出来。公式是<code>corp[i]=corp[i]+corp[i-1]</code>。</p>\n<p>Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] corpFlightBookings(<span class=\"keyword\">int</span>[][] bookings, <span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] tag = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] book : bookings)&#123;</span><br><span class=\"line\">            tag[book[<span class=\"number\">0</span>]-<span class=\"number\">1</span>] += book[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = book[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j&lt;n)&#123;</span><br><span class=\"line\">                tag[j]-=book[<span class=\"number\">2</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            tag[i]=tag[i-<span class=\"number\">1</span>]+tag[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">corpFlightBookings</span><span class=\"params\">(self, bookings: List[List[int]], n: int)</span> -&gt; List[int]:</span></span><br><span class=\"line\">        answer = [<span class=\"number\">0</span>]*n</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> bookings:</span><br><span class=\"line\">            answer[i[<span class=\"number\">0</span>]<span class=\"number\">-1</span>]+=i[<span class=\"number\">2</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i[<span class=\"number\">1</span>]&lt;n:</span><br><span class=\"line\">                answer[i[<span class=\"number\">1</span>]]-=i[<span class=\"number\">2</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">            answer[i]=answer[i<span class=\"number\">-1</span>]+answer[i]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjy1bba6a0001okujc0apsrhz","category_id":"cjy1bbae0000dokujtlgha3gp","_id":"cjy1bbahh001fokujz8h8mu40"},{"post_id":"cjy1bba6k0003okuj2bb9ojz2","category_id":"cjy1bbae8000fokujifrh18sr","_id":"cjy1bbahj001hokujk39gd39e"},{"post_id":"cjy1bba6n0004okuj6y9nl0i8","category_id":"cjy1bbae9000hokuj8weixy0d","_id":"cjy1bbahl001jokujy9tkpqzu"},{"post_id":"cjy1bba6p0005okujgl7e38cp","category_id":"cjy1bbaeb000jokujt2bzaud7","_id":"cjy1bbahm001lokuj70wu1r62"},{"post_id":"cjy1bba6s0006okujrodey1k0","category_id":"cjy1bbaec000lokujs93307rg","_id":"cjy1bbahn001nokujnhvfrx4u"},{"post_id":"cjy1bba6t0007okuj1fbdalmg","category_id":"cjy1bbaed000nokujn64yg0um","_id":"cjy1bbaho001pokujd5zt47dq"},{"post_id":"cjy1bba6v0008okuj74e67uun","category_id":"cjy1bbaed000nokujn64yg0um","_id":"cjy1bbahp001rokujsgp3cq7d"},{"post_id":"cjy1bba6w0009okujbml1y90i","category_id":"cjy1bbae0000dokujtlgha3gp","_id":"cjy1bbahp001tokujpcaiw679"},{"post_id":"cjy1bba6z000aokujzhpiex1h","category_id":"cjy1bbaed000nokujn64yg0um","_id":"cjy1bbahq001vokujml2chp1f"},{"post_id":"cjy1bba72000bokujepxxw6wz","category_id":"cjy1bbaed000nokujn64yg0um","_id":"cjy1bbahr001xokujs65k8m90"},{"post_id":"cjy1bba76000cokujg76iyj4p","category_id":"cjy1bbaed000nokujn64yg0um","_id":"cjy1bbaht001zokuj2i1l0aec"}],"PostTag":[{"post_id":"cjy1bba6a0001okujc0apsrhz","tag_id":"cjy1bbae6000eokujeghul4uo","_id":"cjy1bbah1001eokujiwc1e1l7"},{"post_id":"cjy1bba6a0001okujc0apsrhz","tag_id":"cjy1bbae9000gokujjtw7ca9w","_id":"cjy1bbahj001gokujhhtgolkw"},{"post_id":"cjy1bba6k0003okuj2bb9ojz2","tag_id":"cjy1bbaea000iokuj5t1ezptv","_id":"cjy1bbahk001iokujtat7gefo"},{"post_id":"cjy1bba6k0003okuj2bb9ojz2","tag_id":"cjy1bbaeb000kokujhzjms40r","_id":"cjy1bbahl001kokujgj8m9dzm"},{"post_id":"cjy1bba6n0004okuj6y9nl0i8","tag_id":"cjy1bbaec000mokujpvlfe147","_id":"cjy1bbahm001mokuj7yr367t1"},{"post_id":"cjy1bba6n0004okuj6y9nl0i8","tag_id":"cjy1bbaed000ookujz9fnhs6u","_id":"cjy1bbahn001ookujpznaayqk"},{"post_id":"cjy1bba6p0005okujgl7e38cp","tag_id":"cjy1bbaef000qokuj9u7zxcse","_id":"cjy1bbaho001qokuj0falm82j"},{"post_id":"cjy1bba6p0005okujgl7e38cp","tag_id":"cjy1bbael000sokujze7q4y19","_id":"cjy1bbahp001sokujddl1hqf1"},{"post_id":"cjy1bba6s0006okujrodey1k0","tag_id":"cjy1bbaen000uokujwc5rbxgq","_id":"cjy1bbahq001uokujh0a1xgqx"},{"post_id":"cjy1bba6s0006okujrodey1k0","tag_id":"cjy1bbaeo000wokujywqins06","_id":"cjy1bbahr001wokujn5g4cy9i"},{"post_id":"cjy1bba6t0007okuj1fbdalmg","tag_id":"cjy1bbaep000yokujtuj9s7by","_id":"cjy1bbahs001yokujmkgdzviu"},{"post_id":"cjy1bba6t0007okuj1fbdalmg","tag_id":"cjy1bbaeq000zokujnzzmtuwo","_id":"cjy1bbahu0020okujvs0hjko0"},{"post_id":"cjy1bba6t0007okuj1fbdalmg","tag_id":"cjy1bbaeq0010okujoczxtcy7","_id":"cjy1bbahv0021okujvogjm0ry"},{"post_id":"cjy1bba6t0007okuj1fbdalmg","tag_id":"cjy1bbaer0011okujlirf0x2x","_id":"cjy1bbahw0022okujlmj91nw6"},{"post_id":"cjy1bba6v0008okuj74e67uun","tag_id":"cjy1bbaep000yokujtuj9s7by","_id":"cjy1bbahw0023okujrby1oqyy"},{"post_id":"cjy1bba6v0008okuj74e67uun","tag_id":"cjy1bbaeq000zokujnzzmtuwo","_id":"cjy1bbahx0024okujas0pyfxv"},{"post_id":"cjy1bba6w0009okujbml1y90i","tag_id":"cjy1bbaet0014okujbfaed1va","_id":"cjy1bbahx0025okujsuvt70qa"},{"post_id":"cjy1bba6w0009okujbml1y90i","tag_id":"cjy1bbaeu0015okujpm8azhdy","_id":"cjy1bbahy0026okuj9btndyu5"},{"post_id":"cjy1bba6z000aokujzhpiex1h","tag_id":"cjy1bbaep000yokujtuj9s7by","_id":"cjy1bbai80027okujlic9yyud"},{"post_id":"cjy1bba6z000aokujzhpiex1h","tag_id":"cjy1bbaev0017okuj2ot89hns","_id":"cjy1bbai90028okujzhdq1r7q"},{"post_id":"cjy1bba72000bokujepxxw6wz","tag_id":"cjy1bbaep000yokujtuj9s7by","_id":"cjy1bbaia0029okujtqmxvc3r"},{"post_id":"cjy1bba72000bokujepxxw6wz","tag_id":"cjy1bbaeq000zokujnzzmtuwo","_id":"cjy1bbaia002aokujs2x4knlv"},{"post_id":"cjy1bba72000bokujepxxw6wz","tag_id":"cjy1bbaeq0010okujoczxtcy7","_id":"cjy1bbaib002bokujrcs1w84h"},{"post_id":"cjy1bba76000cokujg76iyj4p","tag_id":"cjy1bbaeq000zokujnzzmtuwo","_id":"cjy1bbaic002cokujdqm67vma"},{"post_id":"cjy1bba76000cokujg76iyj4p","tag_id":"cjy1bbaep000yokujtuj9s7by","_id":"cjy1bbaid002dokuj6z03nkbg"},{"post_id":"cjy1bba76000cokujg76iyj4p","tag_id":"cjy1bbaf0001dokujf64irtn7","_id":"cjy1bbaie002eokujbgusecjk"}],"Tag":[{"name":"Markdown","_id":"cjy1bbae6000eokujeghul4uo"},{"name":"语法","_id":"cjy1bbae9000gokujjtw7ca9w"},{"name":"Dredd","_id":"cjy1bbaea000iokuj5t1ezptv"},{"name":"Apiary","_id":"cjy1bbaeb000kokujhzjms40r"},{"name":"Hexo","_id":"cjy1bbaec000mokujpvlfe147"},{"name":"Error","_id":"cjy1bbaed000ookujz9fnhs6u"},{"name":"Git","_id":"cjy1bbaef000qokuj9u7zxcse"},{"name":"命令","_id":"cjy1bbael000sokujze7q4y19"},{"name":"Json","_id":"cjy1bbaen000uokujwc5rbxgq"},{"name":"字符串","_id":"cjy1bbaeo000wokujywqins06"},{"name":"题解","_id":"cjy1bbaep000yokujtuj9s7by"},{"name":"Medium","_id":"cjy1bbaeq000zokujnzzmtuwo"},{"name":"动态规划","_id":"cjy1bbaeq0010okujoczxtcy7"},{"name":"递归","_id":"cjy1bbaer0011okujlirf0x2x"},{"name":"Shadowsocks","_id":"cjy1bbaet0014okujbfaed1va"},{"name":"Linux","_id":"cjy1bbaeu0015okujpm8azhdy"},{"name":"Easy","_id":"cjy1bbaev0017okuj2ot89hns"},{"name":"差分","_id":"cjy1bbaf0001dokujf64irtn7"}]}}